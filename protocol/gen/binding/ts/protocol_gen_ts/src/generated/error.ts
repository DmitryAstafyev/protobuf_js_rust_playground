/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: error.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export namespace error {
    export enum NativeErrorKind {
        FileNotFound = 0,
        UnsupportedFileType = 1,
        ComputationFailed = 2,
        Configuration = 3,
        Interrupted = 4,
        OperationSearch = 5,
        NotYetImplemented = 6,
        ChannelError = 7,
        Io = 8,
        Grabber = 9
    }
    export enum Severity {
        WARNING = 0,
        ERROR = 1
    }
    export class GrabError extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({} & (({
            config?: GrabError.Config;
            communication?: never;
            io_operation?: never;
            invalid_range?: never;
            interrupted?: never;
            not_initialize?: never;
            unsupported?: never;
        } | {
            config?: never;
            communication?: GrabError.Communication;
            io_operation?: never;
            invalid_range?: never;
            interrupted?: never;
            not_initialize?: never;
            unsupported?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: GrabError.IoOperation;
            invalid_range?: never;
            interrupted?: never;
            not_initialize?: never;
            unsupported?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            invalid_range?: GrabError.InvalidRange;
            interrupted?: never;
            not_initialize?: never;
            unsupported?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            invalid_range?: never;
            interrupted?: GrabError.Interrupted;
            not_initialize?: never;
            unsupported?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            invalid_range?: never;
            interrupted?: never;
            not_initialize?: GrabError.NotInitialize;
            unsupported?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            invalid_range?: never;
            interrupted?: never;
            not_initialize?: never;
            unsupported?: GrabError.Unsupported;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("communication" in data && data.communication != undefined) {
                    this.communication = data.communication;
                }
                if ("io_operation" in data && data.io_operation != undefined) {
                    this.io_operation = data.io_operation;
                }
                if ("invalid_range" in data && data.invalid_range != undefined) {
                    this.invalid_range = data.invalid_range;
                }
                if ("interrupted" in data && data.interrupted != undefined) {
                    this.interrupted = data.interrupted;
                }
                if ("not_initialize" in data && data.not_initialize != undefined) {
                    this.not_initialize = data.not_initialize;
                }
                if ("unsupported" in data && data.unsupported != undefined) {
                    this.unsupported = data.unsupported;
                }
            }
        }
        get config() {
            return pb_1.Message.getWrapperField(this, GrabError.Config, 1) as GrabError.Config;
        }
        set config(value: GrabError.Config) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get communication() {
            return pb_1.Message.getWrapperField(this, GrabError.Communication, 2) as GrabError.Communication;
        }
        set communication(value: GrabError.Communication) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_communication() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get io_operation() {
            return pb_1.Message.getWrapperField(this, GrabError.IoOperation, 3) as GrabError.IoOperation;
        }
        set io_operation(value: GrabError.IoOperation) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_io_operation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get invalid_range() {
            return pb_1.Message.getWrapperField(this, GrabError.InvalidRange, 4) as GrabError.InvalidRange;
        }
        set invalid_range(value: GrabError.InvalidRange) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_invalid_range() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get interrupted() {
            return pb_1.Message.getWrapperField(this, GrabError.Interrupted, 5) as GrabError.Interrupted;
        }
        set interrupted(value: GrabError.Interrupted) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_interrupted() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get not_initialize() {
            return pb_1.Message.getWrapperField(this, GrabError.NotInitialize, 6) as GrabError.NotInitialize;
        }
        set not_initialize(value: GrabError.NotInitialize) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_not_initialize() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get unsupported() {
            return pb_1.Message.getWrapperField(this, GrabError.Unsupported, 7) as GrabError.Unsupported;
        }
        set unsupported(value: GrabError.Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_unsupported() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get error() {
            const cases: {
                [index: number]: "none" | "config" | "communication" | "io_operation" | "invalid_range" | "interrupted" | "not_initialize" | "unsupported";
            } = {
                0: "none",
                1: "config",
                2: "communication",
                3: "io_operation",
                4: "invalid_range",
                5: "interrupted",
                6: "not_initialize",
                7: "unsupported"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            config?: ReturnType<typeof GrabError.Config.prototype.toObject>;
            communication?: ReturnType<typeof GrabError.Communication.prototype.toObject>;
            io_operation?: ReturnType<typeof GrabError.IoOperation.prototype.toObject>;
            invalid_range?: ReturnType<typeof GrabError.InvalidRange.prototype.toObject>;
            interrupted?: ReturnType<typeof GrabError.Interrupted.prototype.toObject>;
            not_initialize?: ReturnType<typeof GrabError.NotInitialize.prototype.toObject>;
            unsupported?: ReturnType<typeof GrabError.Unsupported.prototype.toObject>;
        }): GrabError {
            const message = new GrabError({});
            if (data.config != null) {
                message.config = GrabError.Config.fromObject(data.config);
            }
            if (data.communication != null) {
                message.communication = GrabError.Communication.fromObject(data.communication);
            }
            if (data.io_operation != null) {
                message.io_operation = GrabError.IoOperation.fromObject(data.io_operation);
            }
            if (data.invalid_range != null) {
                message.invalid_range = GrabError.InvalidRange.fromObject(data.invalid_range);
            }
            if (data.interrupted != null) {
                message.interrupted = GrabError.Interrupted.fromObject(data.interrupted);
            }
            if (data.not_initialize != null) {
                message.not_initialize = GrabError.NotInitialize.fromObject(data.not_initialize);
            }
            if (data.unsupported != null) {
                message.unsupported = GrabError.Unsupported.fromObject(data.unsupported);
            }
            return message;
        }
        toObject() {
            const data: {
                config?: ReturnType<typeof GrabError.Config.prototype.toObject>;
                communication?: ReturnType<typeof GrabError.Communication.prototype.toObject>;
                io_operation?: ReturnType<typeof GrabError.IoOperation.prototype.toObject>;
                invalid_range?: ReturnType<typeof GrabError.InvalidRange.prototype.toObject>;
                interrupted?: ReturnType<typeof GrabError.Interrupted.prototype.toObject>;
                not_initialize?: ReturnType<typeof GrabError.NotInitialize.prototype.toObject>;
                unsupported?: ReturnType<typeof GrabError.Unsupported.prototype.toObject>;
            } = {};
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            if (this.communication != null) {
                data.communication = this.communication.toObject();
            }
            if (this.io_operation != null) {
                data.io_operation = this.io_operation.toObject();
            }
            if (this.invalid_range != null) {
                data.invalid_range = this.invalid_range.toObject();
            }
            if (this.interrupted != null) {
                data.interrupted = this.interrupted.toObject();
            }
            if (this.not_initialize != null) {
                data.not_initialize = this.not_initialize.toObject();
            }
            if (this.unsupported != null) {
                data.unsupported = this.unsupported.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_config)
                writer.writeMessage(1, this.config, () => this.config.serialize(writer));
            if (this.has_communication)
                writer.writeMessage(2, this.communication, () => this.communication.serialize(writer));
            if (this.has_io_operation)
                writer.writeMessage(3, this.io_operation, () => this.io_operation.serialize(writer));
            if (this.has_invalid_range)
                writer.writeMessage(4, this.invalid_range, () => this.invalid_range.serialize(writer));
            if (this.has_interrupted)
                writer.writeMessage(5, this.interrupted, () => this.interrupted.serialize(writer));
            if (this.has_not_initialize)
                writer.writeMessage(6, this.not_initialize, () => this.not_initialize.serialize(writer));
            if (this.has_unsupported)
                writer.writeMessage(7, this.unsupported, () => this.unsupported.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GrabError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GrabError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.config, () => message.config = GrabError.Config.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.communication, () => message.communication = GrabError.Communication.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.io_operation, () => message.io_operation = GrabError.IoOperation.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.invalid_range, () => message.invalid_range = GrabError.InvalidRange.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.interrupted, () => message.interrupted = GrabError.Interrupted.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.not_initialize, () => message.not_initialize = GrabError.NotInitialize.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.unsupported, () => message.unsupported = GrabError.Unsupported.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): GrabError {
            return GrabError.deserialize(bytes);
        }
    }
    export namespace GrabError {
        export class Config extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Config {
                const message = new Config({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Config {
                return Config.deserialize(bytes);
            }
        }
        export class Communication extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Communication {
                const message = new Communication({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Communication {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Communication();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Communication {
                return Communication.deserialize(bytes);
            }
        }
        export class IoOperation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): IoOperation {
                const message = new IoOperation({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IoOperation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IoOperation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): IoOperation {
                return IoOperation.deserialize(bytes);
            }
        }
        export class InvalidRange extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                range?: dependency_1.common.RangeInclusive;
                context?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("range" in data && data.range != undefined) {
                        this.range = data.range;
                    }
                    if ("context" in data && data.context != undefined) {
                        this.context = data.context;
                    }
                }
            }
            get range() {
                return pb_1.Message.getWrapperField(this, dependency_1.common.RangeInclusive, 1) as dependency_1.common.RangeInclusive;
            }
            set range(value: dependency_1.common.RangeInclusive) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_range() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get context() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set context(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                range?: ReturnType<typeof dependency_1.common.RangeInclusive.prototype.toObject>;
                context?: string;
            }): InvalidRange {
                const message = new InvalidRange({});
                if (data.range != null) {
                    message.range = dependency_1.common.RangeInclusive.fromObject(data.range);
                }
                if (data.context != null) {
                    message.context = data.context;
                }
                return message;
            }
            toObject() {
                const data: {
                    range?: ReturnType<typeof dependency_1.common.RangeInclusive.prototype.toObject>;
                    context?: string;
                } = {};
                if (this.range != null) {
                    data.range = this.range.toObject();
                }
                if (this.context != null) {
                    data.context = this.context;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_range)
                    writer.writeMessage(1, this.range, () => this.range.serialize(writer));
                if (this.context.length)
                    writer.writeString(2, this.context);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvalidRange {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvalidRange();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.range, () => message.range = dependency_1.common.RangeInclusive.deserialize(reader));
                            break;
                        case 2:
                            message.context = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): InvalidRange {
                return InvalidRange.deserialize(bytes);
            }
        }
        export class Interrupted extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Interrupted {
                const message = new Interrupted({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Interrupted {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Interrupted();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Interrupted {
                return Interrupted.deserialize(bytes);
            }
        }
        export class NotInitialize extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): NotInitialize {
                const message = new NotInitialize({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NotInitialize {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NotInitialize();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): NotInitialize {
                return NotInitialize.deserialize(bytes);
            }
        }
        export class Unsupported extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Unsupported {
                const message = new Unsupported({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Unsupported {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Unsupported();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Unsupported {
                return Unsupported.deserialize(bytes);
            }
        }
    }
    export class SearchError extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({} & (({
            config?: SearchError.Config;
            communication?: never;
            io_operation?: never;
            regex?: never;
            input?: never;
            grab?: never;
            aborted?: never;
        } | {
            config?: never;
            communication?: SearchError.Communication;
            io_operation?: never;
            regex?: never;
            input?: never;
            grab?: never;
            aborted?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: SearchError.IoOperation;
            regex?: never;
            input?: never;
            grab?: never;
            aborted?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            regex?: SearchError.Regex;
            input?: never;
            grab?: never;
            aborted?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            regex?: never;
            input?: SearchError.Input;
            grab?: never;
            aborted?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            regex?: never;
            input?: never;
            grab?: SearchError.Grab;
            aborted?: never;
        } | {
            config?: never;
            communication?: never;
            io_operation?: never;
            regex?: never;
            input?: never;
            grab?: never;
            aborted?: SearchError.Aborted;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("communication" in data && data.communication != undefined) {
                    this.communication = data.communication;
                }
                if ("io_operation" in data && data.io_operation != undefined) {
                    this.io_operation = data.io_operation;
                }
                if ("regex" in data && data.regex != undefined) {
                    this.regex = data.regex;
                }
                if ("input" in data && data.input != undefined) {
                    this.input = data.input;
                }
                if ("grab" in data && data.grab != undefined) {
                    this.grab = data.grab;
                }
                if ("aborted" in data && data.aborted != undefined) {
                    this.aborted = data.aborted;
                }
            }
        }
        get config() {
            return pb_1.Message.getWrapperField(this, SearchError.Config, 1) as SearchError.Config;
        }
        set config(value: SearchError.Config) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get communication() {
            return pb_1.Message.getWrapperField(this, SearchError.Communication, 2) as SearchError.Communication;
        }
        set communication(value: SearchError.Communication) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_communication() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get io_operation() {
            return pb_1.Message.getWrapperField(this, SearchError.IoOperation, 3) as SearchError.IoOperation;
        }
        set io_operation(value: SearchError.IoOperation) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_io_operation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get regex() {
            return pb_1.Message.getWrapperField(this, SearchError.Regex, 4) as SearchError.Regex;
        }
        set regex(value: SearchError.Regex) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_regex() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get input() {
            return pb_1.Message.getWrapperField(this, SearchError.Input, 5) as SearchError.Input;
        }
        set input(value: SearchError.Input) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_input() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get grab() {
            return pb_1.Message.getWrapperField(this, SearchError.Grab, 6) as SearchError.Grab;
        }
        set grab(value: SearchError.Grab) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_grab() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get aborted() {
            return pb_1.Message.getWrapperField(this, SearchError.Aborted, 7) as SearchError.Aborted;
        }
        set aborted(value: SearchError.Aborted) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_aborted() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get error() {
            const cases: {
                [index: number]: "none" | "config" | "communication" | "io_operation" | "regex" | "input" | "grab" | "aborted";
            } = {
                0: "none",
                1: "config",
                2: "communication",
                3: "io_operation",
                4: "regex",
                5: "input",
                6: "grab",
                7: "aborted"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            config?: ReturnType<typeof SearchError.Config.prototype.toObject>;
            communication?: ReturnType<typeof SearchError.Communication.prototype.toObject>;
            io_operation?: ReturnType<typeof SearchError.IoOperation.prototype.toObject>;
            regex?: ReturnType<typeof SearchError.Regex.prototype.toObject>;
            input?: ReturnType<typeof SearchError.Input.prototype.toObject>;
            grab?: ReturnType<typeof SearchError.Grab.prototype.toObject>;
            aborted?: ReturnType<typeof SearchError.Aborted.prototype.toObject>;
        }): SearchError {
            const message = new SearchError({});
            if (data.config != null) {
                message.config = SearchError.Config.fromObject(data.config);
            }
            if (data.communication != null) {
                message.communication = SearchError.Communication.fromObject(data.communication);
            }
            if (data.io_operation != null) {
                message.io_operation = SearchError.IoOperation.fromObject(data.io_operation);
            }
            if (data.regex != null) {
                message.regex = SearchError.Regex.fromObject(data.regex);
            }
            if (data.input != null) {
                message.input = SearchError.Input.fromObject(data.input);
            }
            if (data.grab != null) {
                message.grab = SearchError.Grab.fromObject(data.grab);
            }
            if (data.aborted != null) {
                message.aborted = SearchError.Aborted.fromObject(data.aborted);
            }
            return message;
        }
        toObject() {
            const data: {
                config?: ReturnType<typeof SearchError.Config.prototype.toObject>;
                communication?: ReturnType<typeof SearchError.Communication.prototype.toObject>;
                io_operation?: ReturnType<typeof SearchError.IoOperation.prototype.toObject>;
                regex?: ReturnType<typeof SearchError.Regex.prototype.toObject>;
                input?: ReturnType<typeof SearchError.Input.prototype.toObject>;
                grab?: ReturnType<typeof SearchError.Grab.prototype.toObject>;
                aborted?: ReturnType<typeof SearchError.Aborted.prototype.toObject>;
            } = {};
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            if (this.communication != null) {
                data.communication = this.communication.toObject();
            }
            if (this.io_operation != null) {
                data.io_operation = this.io_operation.toObject();
            }
            if (this.regex != null) {
                data.regex = this.regex.toObject();
            }
            if (this.input != null) {
                data.input = this.input.toObject();
            }
            if (this.grab != null) {
                data.grab = this.grab.toObject();
            }
            if (this.aborted != null) {
                data.aborted = this.aborted.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_config)
                writer.writeMessage(1, this.config, () => this.config.serialize(writer));
            if (this.has_communication)
                writer.writeMessage(2, this.communication, () => this.communication.serialize(writer));
            if (this.has_io_operation)
                writer.writeMessage(3, this.io_operation, () => this.io_operation.serialize(writer));
            if (this.has_regex)
                writer.writeMessage(4, this.regex, () => this.regex.serialize(writer));
            if (this.has_input)
                writer.writeMessage(5, this.input, () => this.input.serialize(writer));
            if (this.has_grab)
                writer.writeMessage(6, this.grab, () => this.grab.serialize(writer));
            if (this.has_aborted)
                writer.writeMessage(7, this.aborted, () => this.aborted.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.config, () => message.config = SearchError.Config.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.communication, () => message.communication = SearchError.Communication.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.io_operation, () => message.io_operation = SearchError.IoOperation.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.regex, () => message.regex = SearchError.Regex.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.input, () => message.input = SearchError.Input.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.grab, () => message.grab = SearchError.Grab.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.aborted, () => message.aborted = SearchError.Aborted.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): SearchError {
            return SearchError.deserialize(bytes);
        }
    }
    export namespace SearchError {
        export class Config extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Config {
                const message = new Config({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Config {
                return Config.deserialize(bytes);
            }
        }
        export class Communication extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Communication {
                const message = new Communication({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Communication {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Communication();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Communication {
                return Communication.deserialize(bytes);
            }
        }
        export class IoOperation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): IoOperation {
                const message = new IoOperation({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IoOperation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IoOperation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): IoOperation {
                return IoOperation.deserialize(bytes);
            }
        }
        export class Regex extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Regex {
                const message = new Regex({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Regex {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Regex();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Regex {
                return Regex.deserialize(bytes);
            }
        }
        export class Input extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Input {
                const message = new Input({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Input {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Input();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Input {
                return Input.deserialize(bytes);
            }
        }
        export class Grab extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                error?: GrabError;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("error" in data && data.error != undefined) {
                        this.error = data.error;
                    }
                }
            }
            get error() {
                return pb_1.Message.getWrapperField(this, GrabError, 1) as GrabError;
            }
            set error(value: GrabError) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_error() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                error?: ReturnType<typeof GrabError.prototype.toObject>;
            }): Grab {
                const message = new Grab({});
                if (data.error != null) {
                    message.error = GrabError.fromObject(data.error);
                }
                return message;
            }
            toObject() {
                const data: {
                    error?: ReturnType<typeof GrabError.prototype.toObject>;
                } = {};
                if (this.error != null) {
                    data.error = this.error.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_error)
                    writer.writeMessage(1, this.error, () => this.error.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Grab {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Grab();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.error, () => message.error = GrabError.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Grab {
                return Grab.deserialize(bytes);
            }
        }
        export class Aborted extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Aborted {
                const message = new Aborted({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Aborted {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Aborted();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Aborted {
                return Aborted.deserialize(bytes);
            }
        }
    }
    export class NativeError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            severity?: Severity;
            kind?: NativeErrorKind;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("severity" in data && data.severity != undefined) {
                    this.severity = data.severity;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get severity() {
            return pb_1.Message.getFieldWithDefault(this, 1, Severity.WARNING) as Severity;
        }
        set severity(value: Severity) {
            pb_1.Message.setField(this, 1, value);
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 2, NativeErrorKind.FileNotFound) as NativeErrorKind;
        }
        set kind(value: NativeErrorKind) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            severity?: Severity;
            kind?: NativeErrorKind;
            message?: string;
        }): NativeError {
            const message = new NativeError({});
            if (data.severity != null) {
                message.severity = data.severity;
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                severity?: Severity;
                kind?: NativeErrorKind;
                message?: string;
            } = {};
            if (this.severity != null) {
                data.severity = this.severity;
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.severity != Severity.WARNING)
                writer.writeEnum(1, this.severity);
            if (this.kind != NativeErrorKind.FileNotFound)
                writer.writeEnum(2, this.kind);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NativeError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NativeError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.severity = reader.readEnum();
                        break;
                    case 2:
                        message.kind = reader.readEnum();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): NativeError {
            return NativeError.deserialize(bytes);
        }
    }
    export class ComputationError extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]];
        constructor(data?: any[] | ({} & (({
            destination_path?: ComputationError.DestinationPath;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: ComputationError.SessionCreatingFail;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: ComputationError.Communication;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: ComputationError.OperationNotSupported;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: ComputationError.IoOperation;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: ComputationError.InvalidData;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: ComputationError.InvalidArgs;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: ComputationError.Process;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: ComputationError.Protocol;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: SearchError;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: ComputationError.MultipleInitCall;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: ComputationError.SessionUnavailable;
            native_error?: never;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: NativeError;
            grabbing?: never;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: ComputationError.Grabbing;
            sde?: never;
        } | {
            destination_path?: never;
            session_creating_fail?: never;
            communication?: never;
            operation_not_supported?: never;
            io_operation?: never;
            invalid_data?: never;
            invalid_args?: never;
            process?: never;
            protocol?: never;
            search_error?: never;
            multiple_init_call?: never;
            session_unavailable?: never;
            native_error?: never;
            grabbing?: never;
            sde?: ComputationError.Sde;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("destination_path" in data && data.destination_path != undefined) {
                    this.destination_path = data.destination_path;
                }
                if ("session_creating_fail" in data && data.session_creating_fail != undefined) {
                    this.session_creating_fail = data.session_creating_fail;
                }
                if ("communication" in data && data.communication != undefined) {
                    this.communication = data.communication;
                }
                if ("operation_not_supported" in data && data.operation_not_supported != undefined) {
                    this.operation_not_supported = data.operation_not_supported;
                }
                if ("io_operation" in data && data.io_operation != undefined) {
                    this.io_operation = data.io_operation;
                }
                if ("invalid_data" in data && data.invalid_data != undefined) {
                    this.invalid_data = data.invalid_data;
                }
                if ("invalid_args" in data && data.invalid_args != undefined) {
                    this.invalid_args = data.invalid_args;
                }
                if ("process" in data && data.process != undefined) {
                    this.process = data.process;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("search_error" in data && data.search_error != undefined) {
                    this.search_error = data.search_error;
                }
                if ("multiple_init_call" in data && data.multiple_init_call != undefined) {
                    this.multiple_init_call = data.multiple_init_call;
                }
                if ("session_unavailable" in data && data.session_unavailable != undefined) {
                    this.session_unavailable = data.session_unavailable;
                }
                if ("native_error" in data && data.native_error != undefined) {
                    this.native_error = data.native_error;
                }
                if ("grabbing" in data && data.grabbing != undefined) {
                    this.grabbing = data.grabbing;
                }
                if ("sde" in data && data.sde != undefined) {
                    this.sde = data.sde;
                }
            }
        }
        get destination_path() {
            return pb_1.Message.getWrapperField(this, ComputationError.DestinationPath, 1) as ComputationError.DestinationPath;
        }
        set destination_path(value: ComputationError.DestinationPath) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_destination_path() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get session_creating_fail() {
            return pb_1.Message.getWrapperField(this, ComputationError.SessionCreatingFail, 2) as ComputationError.SessionCreatingFail;
        }
        set session_creating_fail(value: ComputationError.SessionCreatingFail) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_session_creating_fail() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get communication() {
            return pb_1.Message.getWrapperField(this, ComputationError.Communication, 3) as ComputationError.Communication;
        }
        set communication(value: ComputationError.Communication) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_communication() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get operation_not_supported() {
            return pb_1.Message.getWrapperField(this, ComputationError.OperationNotSupported, 4) as ComputationError.OperationNotSupported;
        }
        set operation_not_supported(value: ComputationError.OperationNotSupported) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_operation_not_supported() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get io_operation() {
            return pb_1.Message.getWrapperField(this, ComputationError.IoOperation, 5) as ComputationError.IoOperation;
        }
        set io_operation(value: ComputationError.IoOperation) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_io_operation() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get invalid_data() {
            return pb_1.Message.getWrapperField(this, ComputationError.InvalidData, 6) as ComputationError.InvalidData;
        }
        set invalid_data(value: ComputationError.InvalidData) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_invalid_data() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get invalid_args() {
            return pb_1.Message.getWrapperField(this, ComputationError.InvalidArgs, 7) as ComputationError.InvalidArgs;
        }
        set invalid_args(value: ComputationError.InvalidArgs) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_invalid_args() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get process() {
            return pb_1.Message.getWrapperField(this, ComputationError.Process, 8) as ComputationError.Process;
        }
        set process(value: ComputationError.Process) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_process() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get protocol() {
            return pb_1.Message.getWrapperField(this, ComputationError.Protocol, 9) as ComputationError.Protocol;
        }
        set protocol(value: ComputationError.Protocol) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_protocol() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get search_error() {
            return pb_1.Message.getWrapperField(this, SearchError, 10) as SearchError;
        }
        set search_error(value: SearchError) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_search_error() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get multiple_init_call() {
            return pb_1.Message.getWrapperField(this, ComputationError.MultipleInitCall, 11) as ComputationError.MultipleInitCall;
        }
        set multiple_init_call(value: ComputationError.MultipleInitCall) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_multiple_init_call() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get session_unavailable() {
            return pb_1.Message.getWrapperField(this, ComputationError.SessionUnavailable, 12) as ComputationError.SessionUnavailable;
        }
        set session_unavailable(value: ComputationError.SessionUnavailable) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_session_unavailable() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get native_error() {
            return pb_1.Message.getWrapperField(this, NativeError, 13) as NativeError;
        }
        set native_error(value: NativeError) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_native_error() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get grabbing() {
            return pb_1.Message.getWrapperField(this, ComputationError.Grabbing, 14) as ComputationError.Grabbing;
        }
        set grabbing(value: ComputationError.Grabbing) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_grabbing() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get sde() {
            return pb_1.Message.getWrapperField(this, ComputationError.Sde, 15) as ComputationError.Sde;
        }
        set sde(value: ComputationError.Sde) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_sde() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get error() {
            const cases: {
                [index: number]: "none" | "destination_path" | "session_creating_fail" | "communication" | "operation_not_supported" | "io_operation" | "invalid_data" | "invalid_args" | "process" | "protocol" | "search_error" | "multiple_init_call" | "session_unavailable" | "native_error" | "grabbing" | "sde";
            } = {
                0: "none",
                1: "destination_path",
                2: "session_creating_fail",
                3: "communication",
                4: "operation_not_supported",
                5: "io_operation",
                6: "invalid_data",
                7: "invalid_args",
                8: "process",
                9: "protocol",
                10: "search_error",
                11: "multiple_init_call",
                12: "session_unavailable",
                13: "native_error",
                14: "grabbing",
                15: "sde"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])];
        }
        static fromObject(data: {
            destination_path?: ReturnType<typeof ComputationError.DestinationPath.prototype.toObject>;
            session_creating_fail?: ReturnType<typeof ComputationError.SessionCreatingFail.prototype.toObject>;
            communication?: ReturnType<typeof ComputationError.Communication.prototype.toObject>;
            operation_not_supported?: ReturnType<typeof ComputationError.OperationNotSupported.prototype.toObject>;
            io_operation?: ReturnType<typeof ComputationError.IoOperation.prototype.toObject>;
            invalid_data?: ReturnType<typeof ComputationError.InvalidData.prototype.toObject>;
            invalid_args?: ReturnType<typeof ComputationError.InvalidArgs.prototype.toObject>;
            process?: ReturnType<typeof ComputationError.Process.prototype.toObject>;
            protocol?: ReturnType<typeof ComputationError.Protocol.prototype.toObject>;
            search_error?: ReturnType<typeof SearchError.prototype.toObject>;
            multiple_init_call?: ReturnType<typeof ComputationError.MultipleInitCall.prototype.toObject>;
            session_unavailable?: ReturnType<typeof ComputationError.SessionUnavailable.prototype.toObject>;
            native_error?: ReturnType<typeof NativeError.prototype.toObject>;
            grabbing?: ReturnType<typeof ComputationError.Grabbing.prototype.toObject>;
            sde?: ReturnType<typeof ComputationError.Sde.prototype.toObject>;
        }): ComputationError {
            const message = new ComputationError({});
            if (data.destination_path != null) {
                message.destination_path = ComputationError.DestinationPath.fromObject(data.destination_path);
            }
            if (data.session_creating_fail != null) {
                message.session_creating_fail = ComputationError.SessionCreatingFail.fromObject(data.session_creating_fail);
            }
            if (data.communication != null) {
                message.communication = ComputationError.Communication.fromObject(data.communication);
            }
            if (data.operation_not_supported != null) {
                message.operation_not_supported = ComputationError.OperationNotSupported.fromObject(data.operation_not_supported);
            }
            if (data.io_operation != null) {
                message.io_operation = ComputationError.IoOperation.fromObject(data.io_operation);
            }
            if (data.invalid_data != null) {
                message.invalid_data = ComputationError.InvalidData.fromObject(data.invalid_data);
            }
            if (data.invalid_args != null) {
                message.invalid_args = ComputationError.InvalidArgs.fromObject(data.invalid_args);
            }
            if (data.process != null) {
                message.process = ComputationError.Process.fromObject(data.process);
            }
            if (data.protocol != null) {
                message.protocol = ComputationError.Protocol.fromObject(data.protocol);
            }
            if (data.search_error != null) {
                message.search_error = SearchError.fromObject(data.search_error);
            }
            if (data.multiple_init_call != null) {
                message.multiple_init_call = ComputationError.MultipleInitCall.fromObject(data.multiple_init_call);
            }
            if (data.session_unavailable != null) {
                message.session_unavailable = ComputationError.SessionUnavailable.fromObject(data.session_unavailable);
            }
            if (data.native_error != null) {
                message.native_error = NativeError.fromObject(data.native_error);
            }
            if (data.grabbing != null) {
                message.grabbing = ComputationError.Grabbing.fromObject(data.grabbing);
            }
            if (data.sde != null) {
                message.sde = ComputationError.Sde.fromObject(data.sde);
            }
            return message;
        }
        toObject() {
            const data: {
                destination_path?: ReturnType<typeof ComputationError.DestinationPath.prototype.toObject>;
                session_creating_fail?: ReturnType<typeof ComputationError.SessionCreatingFail.prototype.toObject>;
                communication?: ReturnType<typeof ComputationError.Communication.prototype.toObject>;
                operation_not_supported?: ReturnType<typeof ComputationError.OperationNotSupported.prototype.toObject>;
                io_operation?: ReturnType<typeof ComputationError.IoOperation.prototype.toObject>;
                invalid_data?: ReturnType<typeof ComputationError.InvalidData.prototype.toObject>;
                invalid_args?: ReturnType<typeof ComputationError.InvalidArgs.prototype.toObject>;
                process?: ReturnType<typeof ComputationError.Process.prototype.toObject>;
                protocol?: ReturnType<typeof ComputationError.Protocol.prototype.toObject>;
                search_error?: ReturnType<typeof SearchError.prototype.toObject>;
                multiple_init_call?: ReturnType<typeof ComputationError.MultipleInitCall.prototype.toObject>;
                session_unavailable?: ReturnType<typeof ComputationError.SessionUnavailable.prototype.toObject>;
                native_error?: ReturnType<typeof NativeError.prototype.toObject>;
                grabbing?: ReturnType<typeof ComputationError.Grabbing.prototype.toObject>;
                sde?: ReturnType<typeof ComputationError.Sde.prototype.toObject>;
            } = {};
            if (this.destination_path != null) {
                data.destination_path = this.destination_path.toObject();
            }
            if (this.session_creating_fail != null) {
                data.session_creating_fail = this.session_creating_fail.toObject();
            }
            if (this.communication != null) {
                data.communication = this.communication.toObject();
            }
            if (this.operation_not_supported != null) {
                data.operation_not_supported = this.operation_not_supported.toObject();
            }
            if (this.io_operation != null) {
                data.io_operation = this.io_operation.toObject();
            }
            if (this.invalid_data != null) {
                data.invalid_data = this.invalid_data.toObject();
            }
            if (this.invalid_args != null) {
                data.invalid_args = this.invalid_args.toObject();
            }
            if (this.process != null) {
                data.process = this.process.toObject();
            }
            if (this.protocol != null) {
                data.protocol = this.protocol.toObject();
            }
            if (this.search_error != null) {
                data.search_error = this.search_error.toObject();
            }
            if (this.multiple_init_call != null) {
                data.multiple_init_call = this.multiple_init_call.toObject();
            }
            if (this.session_unavailable != null) {
                data.session_unavailable = this.session_unavailable.toObject();
            }
            if (this.native_error != null) {
                data.native_error = this.native_error.toObject();
            }
            if (this.grabbing != null) {
                data.grabbing = this.grabbing.toObject();
            }
            if (this.sde != null) {
                data.sde = this.sde.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_destination_path)
                writer.writeMessage(1, this.destination_path, () => this.destination_path.serialize(writer));
            if (this.has_session_creating_fail)
                writer.writeMessage(2, this.session_creating_fail, () => this.session_creating_fail.serialize(writer));
            if (this.has_communication)
                writer.writeMessage(3, this.communication, () => this.communication.serialize(writer));
            if (this.has_operation_not_supported)
                writer.writeMessage(4, this.operation_not_supported, () => this.operation_not_supported.serialize(writer));
            if (this.has_io_operation)
                writer.writeMessage(5, this.io_operation, () => this.io_operation.serialize(writer));
            if (this.has_invalid_data)
                writer.writeMessage(6, this.invalid_data, () => this.invalid_data.serialize(writer));
            if (this.has_invalid_args)
                writer.writeMessage(7, this.invalid_args, () => this.invalid_args.serialize(writer));
            if (this.has_process)
                writer.writeMessage(8, this.process, () => this.process.serialize(writer));
            if (this.has_protocol)
                writer.writeMessage(9, this.protocol, () => this.protocol.serialize(writer));
            if (this.has_search_error)
                writer.writeMessage(10, this.search_error, () => this.search_error.serialize(writer));
            if (this.has_multiple_init_call)
                writer.writeMessage(11, this.multiple_init_call, () => this.multiple_init_call.serialize(writer));
            if (this.has_session_unavailable)
                writer.writeMessage(12, this.session_unavailable, () => this.session_unavailable.serialize(writer));
            if (this.has_native_error)
                writer.writeMessage(13, this.native_error, () => this.native_error.serialize(writer));
            if (this.has_grabbing)
                writer.writeMessage(14, this.grabbing, () => this.grabbing.serialize(writer));
            if (this.has_sde)
                writer.writeMessage(15, this.sde, () => this.sde.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComputationError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComputationError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.destination_path, () => message.destination_path = ComputationError.DestinationPath.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.session_creating_fail, () => message.session_creating_fail = ComputationError.SessionCreatingFail.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.communication, () => message.communication = ComputationError.Communication.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.operation_not_supported, () => message.operation_not_supported = ComputationError.OperationNotSupported.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.io_operation, () => message.io_operation = ComputationError.IoOperation.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.invalid_data, () => message.invalid_data = ComputationError.InvalidData.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.invalid_args, () => message.invalid_args = ComputationError.InvalidArgs.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.process, () => message.process = ComputationError.Process.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.protocol, () => message.protocol = ComputationError.Protocol.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.search_error, () => message.search_error = SearchError.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.multiple_init_call, () => message.multiple_init_call = ComputationError.MultipleInitCall.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.session_unavailable, () => message.session_unavailable = ComputationError.SessionUnavailable.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.native_error, () => message.native_error = NativeError.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.grabbing, () => message.grabbing = ComputationError.Grabbing.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.sde, () => message.sde = ComputationError.Sde.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): ComputationError {
            return ComputationError.deserialize(bytes);
        }
    }
    export namespace ComputationError {
        export class DestinationPath extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): DestinationPath {
                const message = new DestinationPath({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DestinationPath {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DestinationPath();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): DestinationPath {
                return DestinationPath.deserialize(bytes);
            }
        }
        export class SessionCreatingFail extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): SessionCreatingFail {
                const message = new SessionCreatingFail({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionCreatingFail {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionCreatingFail();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): SessionCreatingFail {
                return SessionCreatingFail.deserialize(bytes);
            }
        }
        export class Communication extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Communication {
                const message = new Communication({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Communication {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Communication();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Communication {
                return Communication.deserialize(bytes);
            }
        }
        export class OperationNotSupported extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): OperationNotSupported {
                const message = new OperationNotSupported({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperationNotSupported {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationNotSupported();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): OperationNotSupported {
                return OperationNotSupported.deserialize(bytes);
            }
        }
        export class IoOperation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): IoOperation {
                const message = new IoOperation({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IoOperation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IoOperation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): IoOperation {
                return IoOperation.deserialize(bytes);
            }
        }
        export class InvalidData extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): InvalidData {
                const message = new InvalidData({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvalidData {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvalidData();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): InvalidData {
                return InvalidData.deserialize(bytes);
            }
        }
        export class InvalidArgs extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): InvalidArgs {
                const message = new InvalidArgs({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvalidArgs {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvalidArgs();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): InvalidArgs {
                return InvalidArgs.deserialize(bytes);
            }
        }
        export class Process extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Process {
                const message = new Process({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Process {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Process();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Process {
                return Process.deserialize(bytes);
            }
        }
        export class Protocol extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Protocol {
                const message = new Protocol({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Protocol {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Protocol();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Protocol {
                return Protocol.deserialize(bytes);
            }
        }
        export class MultipleInitCall extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): MultipleInitCall {
                const message = new MultipleInitCall({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleInitCall {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleInitCall();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): MultipleInitCall {
                return MultipleInitCall.deserialize(bytes);
            }
        }
        export class SessionUnavailable extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): SessionUnavailable {
                const message = new SessionUnavailable({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionUnavailable {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionUnavailable();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): SessionUnavailable {
                return SessionUnavailable.deserialize(bytes);
            }
        }
        export class Grabbing extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                error?: GrabError;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("error" in data && data.error != undefined) {
                        this.error = data.error;
                    }
                }
            }
            get error() {
                return pb_1.Message.getWrapperField(this, GrabError, 1) as GrabError;
            }
            set error(value: GrabError) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_error() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                error?: ReturnType<typeof GrabError.prototype.toObject>;
            }): Grabbing {
                const message = new Grabbing({});
                if (data.error != null) {
                    message.error = GrabError.fromObject(data.error);
                }
                return message;
            }
            toObject() {
                const data: {
                    error?: ReturnType<typeof GrabError.prototype.toObject>;
                } = {};
                if (this.error != null) {
                    data.error = this.error.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_error)
                    writer.writeMessage(1, this.error, () => this.error.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Grabbing {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Grabbing();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.error, () => message.error = GrabError.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Grabbing {
                return Grabbing.deserialize(bytes);
            }
        }
        export class Sde extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                message?: string;
            }): Sde {
                const message = new Sde({});
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    message?: string;
                } = {};
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message.length)
                    writer.writeString(1, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sde {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sde();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Sde {
                return Sde.deserialize(bytes);
            }
        }
    }
}
