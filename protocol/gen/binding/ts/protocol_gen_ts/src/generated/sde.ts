/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: sde.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace sde {
    export class SdeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(
            data?:
                | any[]
                | ({} & (
                      | {
                            write_text?: string;
                            write_bytes?: never;
                        }
                      | {
                            write_text?: never;
                            write_bytes?: Uint8Array;
                        }
                  ))
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("write_text" in data && data.write_text != undefined) {
                    this.write_text = data.write_text;
                }
                if ("write_bytes" in data && data.write_bytes != undefined) {
                    this.write_bytes = data.write_bytes;
                }
            }
        }
        get write_text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set write_text(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_write_text() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get write_bytes() {
            return pb_1.Message.getFieldWithDefault(
                this,
                2,
                new Uint8Array(0)
            ) as Uint8Array;
        }
        set write_bytes(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_write_bytes() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "write_text" | "write_bytes";
            } = {
                0: "none",
                1: "write_text",
                2: "write_bytes",
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            write_text?: string;
            write_bytes?: Uint8Array;
        }): SdeRequest {
            const message = new SdeRequest({});
            if (data.write_text != null) {
                message.write_text = data.write_text;
            }
            if (data.write_bytes != null) {
                message.write_bytes = data.write_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                write_text?: string;
                write_bytes?: Uint8Array;
            } = {};
            if (this.write_text != null) {
                data.write_text = this.write_text;
            }
            if (this.write_bytes != null) {
                data.write_bytes = this.write_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_write_text) writer.writeString(1, this.write_text);
            if (this.has_write_bytes) writer.writeBytes(2, this.write_bytes);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SdeRequest {
            const reader =
                    bytes instanceof pb_1.BinaryReader
                        ? bytes
                        : new pb_1.BinaryReader(bytes),
                message = new SdeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.write_text = reader.readString();
                        break;
                    case 2:
                        message.write_bytes = reader.readBytes();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): SdeRequest {
            return SdeRequest.deserialize(bytes);
        }
    }
    export class SdeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      bytes?: number;
                  }
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls
            );
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bytes" in data && data.bytes != undefined) {
                    this.bytes = data.bytes;
                }
            }
        }
        get bytes() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set bytes(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: { bytes?: number }): SdeResponse {
            const message = new SdeResponse({});
            if (data.bytes != null) {
                message.bytes = data.bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                bytes?: number;
            } = {};
            if (this.bytes != null) {
                data.bytes = this.bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bytes != 0) writer.writeUint64(1, this.bytes);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SdeResponse {
            const reader =
                    bytes instanceof pb_1.BinaryReader
                        ? bytes
                        : new pb_1.BinaryReader(bytes),
                message = new SdeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bytes = reader.readUint64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): SdeResponse {
            return SdeResponse.deserialize(bytes);
        }
    }
}
