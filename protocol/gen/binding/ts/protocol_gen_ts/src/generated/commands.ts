/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: commands.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace commands {
    export class Output extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            stringValue?: string;
            stringVecValue?: never;
            optionStringValue?: never;
            boolValue?: never;
            int64Value?: never;
            emptyValue?: never;
        } | {
            stringValue?: never;
            stringVecValue?: Output.StringVec;
            optionStringValue?: never;
            boolValue?: never;
            int64Value?: never;
            emptyValue?: never;
        } | {
            stringValue?: never;
            stringVecValue?: never;
            optionStringValue?: string;
            boolValue?: never;
            int64Value?: never;
            emptyValue?: never;
        } | {
            stringValue?: never;
            stringVecValue?: never;
            optionStringValue?: never;
            boolValue?: boolean;
            int64Value?: never;
            emptyValue?: never;
        } | {
            stringValue?: never;
            stringVecValue?: never;
            optionStringValue?: never;
            boolValue?: never;
            int64Value?: number;
            emptyValue?: never;
        } | {
            stringValue?: never;
            stringVecValue?: never;
            optionStringValue?: never;
            boolValue?: never;
            int64Value?: never;
            emptyValue?: Output.Empty;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stringValue" in data && data.stringValue != undefined) {
                    this.stringValue = data.stringValue;
                }
                if ("stringVecValue" in data && data.stringVecValue != undefined) {
                    this.stringVecValue = data.stringVecValue;
                }
                if ("optionStringValue" in data && data.optionStringValue != undefined) {
                    this.optionStringValue = data.optionStringValue;
                }
                if ("boolValue" in data && data.boolValue != undefined) {
                    this.boolValue = data.boolValue;
                }
                if ("int64Value" in data && data.int64Value != undefined) {
                    this.int64Value = data.int64Value;
                }
                if ("emptyValue" in data && data.emptyValue != undefined) {
                    this.emptyValue = data.emptyValue;
                }
            }
        }
        get stringValue() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set stringValue(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_stringValue() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get stringVecValue() {
            return pb_1.Message.getWrapperField(this, Output.StringVec, 2) as Output.StringVec;
        }
        set stringVecValue(value: Output.StringVec) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_stringVecValue() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get optionStringValue() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set optionStringValue(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_optionStringValue() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get boolValue() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set boolValue(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_boolValue() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get int64Value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set int64Value(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_int64Value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get emptyValue() {
            return pb_1.Message.getWrapperField(this, Output.Empty, 6) as Output.Empty;
        }
        set emptyValue(value: Output.Empty) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_emptyValue() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get output() {
            const cases: {
                [index: number]: "none" | "stringValue" | "stringVecValue" | "optionStringValue" | "boolValue" | "int64Value" | "emptyValue";
            } = {
                0: "none",
                1: "stringValue",
                2: "stringVecValue",
                3: "optionStringValue",
                4: "boolValue",
                5: "int64Value",
                6: "emptyValue"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            stringValue?: string;
            stringVecValue?: ReturnType<typeof Output.StringVec.prototype.toObject>;
            optionStringValue?: string;
            boolValue?: boolean;
            int64Value?: number;
            emptyValue?: ReturnType<typeof Output.Empty.prototype.toObject>;
        }): Output {
            const message = new Output({});
            if (data.stringValue != null) {
                message.stringValue = data.stringValue;
            }
            if (data.stringVecValue != null) {
                message.stringVecValue = Output.StringVec.fromObject(data.stringVecValue);
            }
            if (data.optionStringValue != null) {
                message.optionStringValue = data.optionStringValue;
            }
            if (data.boolValue != null) {
                message.boolValue = data.boolValue;
            }
            if (data.int64Value != null) {
                message.int64Value = data.int64Value;
            }
            if (data.emptyValue != null) {
                message.emptyValue = Output.Empty.fromObject(data.emptyValue);
            }
            return message;
        }
        toObject() {
            const data: {
                stringValue?: string;
                stringVecValue?: ReturnType<typeof Output.StringVec.prototype.toObject>;
                optionStringValue?: string;
                boolValue?: boolean;
                int64Value?: number;
                emptyValue?: ReturnType<typeof Output.Empty.prototype.toObject>;
            } = {};
            if (this.stringValue != null) {
                data.stringValue = this.stringValue;
            }
            if (this.stringVecValue != null) {
                data.stringVecValue = this.stringVecValue.toObject();
            }
            if (this.optionStringValue != null) {
                data.optionStringValue = this.optionStringValue;
            }
            if (this.boolValue != null) {
                data.boolValue = this.boolValue;
            }
            if (this.int64Value != null) {
                data.int64Value = this.int64Value;
            }
            if (this.emptyValue != null) {
                data.emptyValue = this.emptyValue.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stringValue)
                writer.writeString(1, this.stringValue);
            if (this.has_stringVecValue)
                writer.writeMessage(2, this.stringVecValue, () => this.stringVecValue.serialize(writer));
            if (this.has_optionStringValue)
                writer.writeString(3, this.optionStringValue);
            if (this.has_boolValue)
                writer.writeBool(4, this.boolValue);
            if (this.has_int64Value)
                writer.writeInt64(5, this.int64Value);
            if (this.has_emptyValue)
                writer.writeMessage(6, this.emptyValue, () => this.emptyValue.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Output {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Output();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stringValue = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.stringVecValue, () => message.stringVecValue = Output.StringVec.deserialize(reader));
                        break;
                    case 3:
                        message.optionStringValue = reader.readString();
                        break;
                    case 4:
                        message.boolValue = reader.readBool();
                        break;
                    case 5:
                        message.int64Value = reader.readInt64();
                        break;
                    case 6:
                        reader.readMessage(message.emptyValue, () => message.emptyValue = Output.Empty.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Output {
            return Output.deserialize(bytes);
        }
    }
    export namespace Output {
        export class StringVec extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                values?: string[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("values" in data && data.values != undefined) {
                        this.values = data.values;
                    }
                }
            }
            get values() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
            }
            set values(value: string[]) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                values?: string[];
            }): StringVec {
                const message = new StringVec({});
                if (data.values != null) {
                    message.values = data.values;
                }
                return message;
            }
            toObject() {
                const data: {
                    values?: string[];
                } = {};
                if (this.values != null) {
                    data.values = this.values;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.values.length)
                    writer.writeRepeatedString(1, this.values);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StringVec {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StringVec();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): StringVec {
                return StringVec.deserialize(bytes);
            }
        }
        export class Empty extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Empty {
                const message = new Empty({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Empty {
                return Empty.deserialize(bytes);
            }
        }
    }
    export class CommandOutcome extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            finished?: CommandOutcome.Finished;
            cancelled?: never;
        } | {
            finished?: never;
            cancelled?: CommandOutcome.Cancelled;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("finished" in data && data.finished != undefined) {
                    this.finished = data.finished;
                }
                if ("cancelled" in data && data.cancelled != undefined) {
                    this.cancelled = data.cancelled;
                }
            }
        }
        get finished() {
            return pb_1.Message.getWrapperField(this, CommandOutcome.Finished, 1) as CommandOutcome.Finished;
        }
        set finished(value: CommandOutcome.Finished) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_finished() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get cancelled() {
            return pb_1.Message.getWrapperField(this, CommandOutcome.Cancelled, 2) as CommandOutcome.Cancelled;
        }
        set cancelled(value: CommandOutcome.Cancelled) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_cancelled() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get outcome() {
            const cases: {
                [index: number]: "none" | "finished" | "cancelled";
            } = {
                0: "none",
                1: "finished",
                2: "cancelled"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            finished?: ReturnType<typeof CommandOutcome.Finished.prototype.toObject>;
            cancelled?: ReturnType<typeof CommandOutcome.Cancelled.prototype.toObject>;
        }): CommandOutcome {
            const message = new CommandOutcome({});
            if (data.finished != null) {
                message.finished = CommandOutcome.Finished.fromObject(data.finished);
            }
            if (data.cancelled != null) {
                message.cancelled = CommandOutcome.Cancelled.fromObject(data.cancelled);
            }
            return message;
        }
        toObject() {
            const data: {
                finished?: ReturnType<typeof CommandOutcome.Finished.prototype.toObject>;
                cancelled?: ReturnType<typeof CommandOutcome.Cancelled.prototype.toObject>;
            } = {};
            if (this.finished != null) {
                data.finished = this.finished.toObject();
            }
            if (this.cancelled != null) {
                data.cancelled = this.cancelled.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_finished)
                writer.writeMessage(1, this.finished, () => this.finished.serialize(writer));
            if (this.has_cancelled)
                writer.writeMessage(2, this.cancelled, () => this.cancelled.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommandOutcome {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommandOutcome();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.finished, () => message.finished = CommandOutcome.Finished.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.cancelled, () => message.cancelled = CommandOutcome.Cancelled.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): CommandOutcome {
            return CommandOutcome.deserialize(bytes);
        }
    }
    export namespace CommandOutcome {
        export class Finished extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                result?: Output;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("result" in data && data.result != undefined) {
                        this.result = data.result;
                    }
                }
            }
            get result() {
                return pb_1.Message.getWrapperField(this, Output, 1) as Output;
            }
            set result(value: Output) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_result() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                result?: ReturnType<typeof Output.prototype.toObject>;
            }): Finished {
                const message = new Finished({});
                if (data.result != null) {
                    message.result = Output.fromObject(data.result);
                }
                return message;
            }
            toObject() {
                const data: {
                    result?: ReturnType<typeof Output.prototype.toObject>;
                } = {};
                if (this.result != null) {
                    data.result = this.result.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_result)
                    writer.writeMessage(1, this.result, () => this.result.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Finished {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Finished();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.result, () => message.result = Output.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Finished {
                return Finished.deserialize(bytes);
            }
        }
        export class Cancelled extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Cancelled {
                const message = new Cancelled({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cancelled {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Cancelled();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Cancelled {
                return Cancelled.deserialize(bytes);
            }
        }
    }
}
