// source: error.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.error.ComputationError');
goog.provide('proto.error.ComputationError.Communication');
goog.provide('proto.error.ComputationError.DestinationPath');
goog.provide('proto.error.ComputationError.ErrorCase');
goog.provide('proto.error.ComputationError.Grabbing');
goog.provide('proto.error.ComputationError.InvalidArgs');
goog.provide('proto.error.ComputationError.InvalidData');
goog.provide('proto.error.ComputationError.IoOperation');
goog.provide('proto.error.ComputationError.MultipleInitCall');
goog.provide('proto.error.ComputationError.OperationNotSupported');
goog.provide('proto.error.ComputationError.Process');
goog.provide('proto.error.ComputationError.Protocol');
goog.provide('proto.error.ComputationError.Sde');
goog.provide('proto.error.ComputationError.SessionCreatingFail');
goog.provide('proto.error.ComputationError.SessionUnavailable');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.error.GrabError');
goog.require('proto.error.NativeError');
goog.require('proto.error.SearchError');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.error.ComputationError.oneofGroups_);
};
goog.inherits(proto.error.ComputationError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.displayName = 'proto.error.ComputationError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.DestinationPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.DestinationPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.DestinationPath.displayName = 'proto.error.ComputationError.DestinationPath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.SessionCreatingFail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.SessionCreatingFail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.SessionCreatingFail.displayName = 'proto.error.ComputationError.SessionCreatingFail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.Communication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.Communication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.Communication.displayName = 'proto.error.ComputationError.Communication';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.OperationNotSupported = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.OperationNotSupported, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.OperationNotSupported.displayName = 'proto.error.ComputationError.OperationNotSupported';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.IoOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.IoOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.IoOperation.displayName = 'proto.error.ComputationError.IoOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.InvalidData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.InvalidData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.InvalidData.displayName = 'proto.error.ComputationError.InvalidData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.InvalidArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.InvalidArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.InvalidArgs.displayName = 'proto.error.ComputationError.InvalidArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.Process.displayName = 'proto.error.ComputationError.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.Protocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.Protocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.Protocol.displayName = 'proto.error.ComputationError.Protocol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.MultipleInitCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.MultipleInitCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.MultipleInitCall.displayName = 'proto.error.ComputationError.MultipleInitCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.SessionUnavailable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.SessionUnavailable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.SessionUnavailable.displayName = 'proto.error.ComputationError.SessionUnavailable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.Grabbing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.Grabbing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.Grabbing.displayName = 'proto.error.ComputationError.Grabbing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.error.ComputationError.Sde = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.error.ComputationError.Sde, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.error.ComputationError.Sde.displayName = 'proto.error.ComputationError.Sde';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.error.ComputationError.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.error.ComputationError.ErrorCase = {
  ERROR_NOT_SET: 0,
  DESTINATION_PATH: 1,
  SESSION_CREATING_FAIL: 2,
  COMMUNICATION: 3,
  OPERATION_NOT_SUPPORTED: 4,
  IO_OPERATION: 5,
  INVALID_DATA: 6,
  INVALID_ARGS: 7,
  PROCESS: 8,
  PROTOCOL: 9,
  SEARCH_ERROR: 10,
  MULTIPLE_INIT_CALL: 11,
  SESSION_UNAVAILABLE: 12,
  NATIVE_ERROR: 13,
  GRABBING: 14,
  SDE: 15
};

/**
 * @return {proto.error.ComputationError.ErrorCase}
 */
proto.error.ComputationError.prototype.getErrorCase = function() {
  return /** @type {proto.error.ComputationError.ErrorCase} */(jspb.Message.computeOneofCase(this, proto.error.ComputationError.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.toObject = function(includeInstance, msg) {
  var f, obj = {
    destinationPath: (f = msg.getDestinationPath()) && proto.error.ComputationError.DestinationPath.toObject(includeInstance, f),
    sessionCreatingFail: (f = msg.getSessionCreatingFail()) && proto.error.ComputationError.SessionCreatingFail.toObject(includeInstance, f),
    communication: (f = msg.getCommunication()) && proto.error.ComputationError.Communication.toObject(includeInstance, f),
    operationNotSupported: (f = msg.getOperationNotSupported()) && proto.error.ComputationError.OperationNotSupported.toObject(includeInstance, f),
    ioOperation: (f = msg.getIoOperation()) && proto.error.ComputationError.IoOperation.toObject(includeInstance, f),
    invalidData: (f = msg.getInvalidData()) && proto.error.ComputationError.InvalidData.toObject(includeInstance, f),
    invalidArgs: (f = msg.getInvalidArgs()) && proto.error.ComputationError.InvalidArgs.toObject(includeInstance, f),
    process: (f = msg.getProcess()) && proto.error.ComputationError.Process.toObject(includeInstance, f),
    protocol: (f = msg.getProtocol()) && proto.error.ComputationError.Protocol.toObject(includeInstance, f),
    searchError: (f = msg.getSearchError()) && proto.error.SearchError.toObject(includeInstance, f),
    multipleInitCall: (f = msg.getMultipleInitCall()) && proto.error.ComputationError.MultipleInitCall.toObject(includeInstance, f),
    sessionUnavailable: (f = msg.getSessionUnavailable()) && proto.error.ComputationError.SessionUnavailable.toObject(includeInstance, f),
    nativeError: (f = msg.getNativeError()) && proto.error.NativeError.toObject(includeInstance, f),
    grabbing: (f = msg.getGrabbing()) && proto.error.ComputationError.Grabbing.toObject(includeInstance, f),
    sde: (f = msg.getSde()) && proto.error.ComputationError.Sde.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError}
 */
proto.error.ComputationError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError;
  return proto.error.ComputationError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError}
 */
proto.error.ComputationError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.error.ComputationError.DestinationPath;
      reader.readMessage(value,proto.error.ComputationError.DestinationPath.deserializeBinaryFromReader);
      msg.setDestinationPath(value);
      break;
    case 2:
      var value = new proto.error.ComputationError.SessionCreatingFail;
      reader.readMessage(value,proto.error.ComputationError.SessionCreatingFail.deserializeBinaryFromReader);
      msg.setSessionCreatingFail(value);
      break;
    case 3:
      var value = new proto.error.ComputationError.Communication;
      reader.readMessage(value,proto.error.ComputationError.Communication.deserializeBinaryFromReader);
      msg.setCommunication(value);
      break;
    case 4:
      var value = new proto.error.ComputationError.OperationNotSupported;
      reader.readMessage(value,proto.error.ComputationError.OperationNotSupported.deserializeBinaryFromReader);
      msg.setOperationNotSupported(value);
      break;
    case 5:
      var value = new proto.error.ComputationError.IoOperation;
      reader.readMessage(value,proto.error.ComputationError.IoOperation.deserializeBinaryFromReader);
      msg.setIoOperation(value);
      break;
    case 6:
      var value = new proto.error.ComputationError.InvalidData;
      reader.readMessage(value,proto.error.ComputationError.InvalidData.deserializeBinaryFromReader);
      msg.setInvalidData(value);
      break;
    case 7:
      var value = new proto.error.ComputationError.InvalidArgs;
      reader.readMessage(value,proto.error.ComputationError.InvalidArgs.deserializeBinaryFromReader);
      msg.setInvalidArgs(value);
      break;
    case 8:
      var value = new proto.error.ComputationError.Process;
      reader.readMessage(value,proto.error.ComputationError.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 9:
      var value = new proto.error.ComputationError.Protocol;
      reader.readMessage(value,proto.error.ComputationError.Protocol.deserializeBinaryFromReader);
      msg.setProtocol(value);
      break;
    case 10:
      var value = new proto.error.SearchError;
      reader.readMessage(value,proto.error.SearchError.deserializeBinaryFromReader);
      msg.setSearchError(value);
      break;
    case 11:
      var value = new proto.error.ComputationError.MultipleInitCall;
      reader.readMessage(value,proto.error.ComputationError.MultipleInitCall.deserializeBinaryFromReader);
      msg.setMultipleInitCall(value);
      break;
    case 12:
      var value = new proto.error.ComputationError.SessionUnavailable;
      reader.readMessage(value,proto.error.ComputationError.SessionUnavailable.deserializeBinaryFromReader);
      msg.setSessionUnavailable(value);
      break;
    case 13:
      var value = new proto.error.NativeError;
      reader.readMessage(value,proto.error.NativeError.deserializeBinaryFromReader);
      msg.setNativeError(value);
      break;
    case 14:
      var value = new proto.error.ComputationError.Grabbing;
      reader.readMessage(value,proto.error.ComputationError.Grabbing.deserializeBinaryFromReader);
      msg.setGrabbing(value);
      break;
    case 15:
      var value = new proto.error.ComputationError.Sde;
      reader.readMessage(value,proto.error.ComputationError.Sde.deserializeBinaryFromReader);
      msg.setSde(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestinationPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.error.ComputationError.DestinationPath.serializeBinaryToWriter
    );
  }
  f = message.getSessionCreatingFail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.error.ComputationError.SessionCreatingFail.serializeBinaryToWriter
    );
  }
  f = message.getCommunication();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.error.ComputationError.Communication.serializeBinaryToWriter
    );
  }
  f = message.getOperationNotSupported();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.error.ComputationError.OperationNotSupported.serializeBinaryToWriter
    );
  }
  f = message.getIoOperation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.error.ComputationError.IoOperation.serializeBinaryToWriter
    );
  }
  f = message.getInvalidData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.error.ComputationError.InvalidData.serializeBinaryToWriter
    );
  }
  f = message.getInvalidArgs();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.error.ComputationError.InvalidArgs.serializeBinaryToWriter
    );
  }
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.error.ComputationError.Process.serializeBinaryToWriter
    );
  }
  f = message.getProtocol();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.error.ComputationError.Protocol.serializeBinaryToWriter
    );
  }
  f = message.getSearchError();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.error.SearchError.serializeBinaryToWriter
    );
  }
  f = message.getMultipleInitCall();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.error.ComputationError.MultipleInitCall.serializeBinaryToWriter
    );
  }
  f = message.getSessionUnavailable();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.error.ComputationError.SessionUnavailable.serializeBinaryToWriter
    );
  }
  f = message.getNativeError();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.error.NativeError.serializeBinaryToWriter
    );
  }
  f = message.getGrabbing();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.error.ComputationError.Grabbing.serializeBinaryToWriter
    );
  }
  f = message.getSde();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.error.ComputationError.Sde.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.DestinationPath.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.DestinationPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.DestinationPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.DestinationPath.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.DestinationPath}
 */
proto.error.ComputationError.DestinationPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.DestinationPath;
  return proto.error.ComputationError.DestinationPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.DestinationPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.DestinationPath}
 */
proto.error.ComputationError.DestinationPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.DestinationPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.DestinationPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.DestinationPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.DestinationPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.SessionCreatingFail.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.SessionCreatingFail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.SessionCreatingFail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.SessionCreatingFail.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.SessionCreatingFail}
 */
proto.error.ComputationError.SessionCreatingFail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.SessionCreatingFail;
  return proto.error.ComputationError.SessionCreatingFail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.SessionCreatingFail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.SessionCreatingFail}
 */
proto.error.ComputationError.SessionCreatingFail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.SessionCreatingFail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.SessionCreatingFail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.SessionCreatingFail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.SessionCreatingFail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.Communication.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.Communication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.Communication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Communication.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.Communication}
 */
proto.error.ComputationError.Communication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.Communication;
  return proto.error.ComputationError.Communication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.Communication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.Communication}
 */
proto.error.ComputationError.Communication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.Communication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.Communication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.Communication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Communication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.error.ComputationError.Communication.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.error.ComputationError.Communication} returns this
 */
proto.error.ComputationError.Communication.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.OperationNotSupported.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.OperationNotSupported.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.OperationNotSupported} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.OperationNotSupported.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.OperationNotSupported}
 */
proto.error.ComputationError.OperationNotSupported.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.OperationNotSupported;
  return proto.error.ComputationError.OperationNotSupported.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.OperationNotSupported} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.OperationNotSupported}
 */
proto.error.ComputationError.OperationNotSupported.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.OperationNotSupported.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.OperationNotSupported.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.OperationNotSupported} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.OperationNotSupported.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.error.ComputationError.OperationNotSupported.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.error.ComputationError.OperationNotSupported} returns this
 */
proto.error.ComputationError.OperationNotSupported.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.IoOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.IoOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.IoOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.IoOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.IoOperation}
 */
proto.error.ComputationError.IoOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.IoOperation;
  return proto.error.ComputationError.IoOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.IoOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.IoOperation}
 */
proto.error.ComputationError.IoOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.IoOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.IoOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.IoOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.IoOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.error.ComputationError.IoOperation.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.error.ComputationError.IoOperation} returns this
 */
proto.error.ComputationError.IoOperation.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.InvalidData.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.InvalidData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.InvalidData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.InvalidData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.InvalidData}
 */
proto.error.ComputationError.InvalidData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.InvalidData;
  return proto.error.ComputationError.InvalidData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.InvalidData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.InvalidData}
 */
proto.error.ComputationError.InvalidData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.InvalidData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.InvalidData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.InvalidData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.InvalidData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.InvalidArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.InvalidArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.InvalidArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.InvalidArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.InvalidArgs}
 */
proto.error.ComputationError.InvalidArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.InvalidArgs;
  return proto.error.ComputationError.InvalidArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.InvalidArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.InvalidArgs}
 */
proto.error.ComputationError.InvalidArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.InvalidArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.InvalidArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.InvalidArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.InvalidArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.error.ComputationError.InvalidArgs.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.error.ComputationError.InvalidArgs} returns this
 */
proto.error.ComputationError.InvalidArgs.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.Process}
 */
proto.error.ComputationError.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.Process;
  return proto.error.ComputationError.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.Process}
 */
proto.error.ComputationError.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.error.ComputationError.Process.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.error.ComputationError.Process} returns this
 */
proto.error.ComputationError.Process.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.Protocol.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.Protocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.Protocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Protocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.Protocol}
 */
proto.error.ComputationError.Protocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.Protocol;
  return proto.error.ComputationError.Protocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.Protocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.Protocol}
 */
proto.error.ComputationError.Protocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.Protocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.Protocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.Protocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Protocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.error.ComputationError.Protocol.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.error.ComputationError.Protocol} returns this
 */
proto.error.ComputationError.Protocol.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.MultipleInitCall.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.MultipleInitCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.MultipleInitCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.MultipleInitCall.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.MultipleInitCall}
 */
proto.error.ComputationError.MultipleInitCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.MultipleInitCall;
  return proto.error.ComputationError.MultipleInitCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.MultipleInitCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.MultipleInitCall}
 */
proto.error.ComputationError.MultipleInitCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.MultipleInitCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.MultipleInitCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.MultipleInitCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.MultipleInitCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.SessionUnavailable.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.SessionUnavailable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.SessionUnavailable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.SessionUnavailable.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.SessionUnavailable}
 */
proto.error.ComputationError.SessionUnavailable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.SessionUnavailable;
  return proto.error.ComputationError.SessionUnavailable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.SessionUnavailable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.SessionUnavailable}
 */
proto.error.ComputationError.SessionUnavailable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.SessionUnavailable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.SessionUnavailable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.SessionUnavailable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.SessionUnavailable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.Grabbing.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.Grabbing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.Grabbing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Grabbing.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.error.GrabError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.Grabbing}
 */
proto.error.ComputationError.Grabbing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.Grabbing;
  return proto.error.ComputationError.Grabbing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.Grabbing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.Grabbing}
 */
proto.error.ComputationError.Grabbing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.error.GrabError;
      reader.readMessage(value,proto.error.GrabError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.Grabbing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.Grabbing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.Grabbing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Grabbing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.error.GrabError.serializeBinaryToWriter
    );
  }
};


/**
 * optional GrabError error = 1;
 * @return {?proto.error.GrabError}
 */
proto.error.ComputationError.Grabbing.prototype.getError = function() {
  return /** @type{?proto.error.GrabError} */ (
    jspb.Message.getWrapperField(this, proto.error.GrabError, 1));
};


/**
 * @param {?proto.error.GrabError|undefined} value
 * @return {!proto.error.ComputationError.Grabbing} returns this
*/
proto.error.ComputationError.Grabbing.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError.Grabbing} returns this
 */
proto.error.ComputationError.Grabbing.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.Grabbing.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.error.ComputationError.Sde.prototype.toObject = function(opt_includeInstance) {
  return proto.error.ComputationError.Sde.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.error.ComputationError.Sde} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Sde.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.error.ComputationError.Sde}
 */
proto.error.ComputationError.Sde.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.error.ComputationError.Sde;
  return proto.error.ComputationError.Sde.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.error.ComputationError.Sde} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.error.ComputationError.Sde}
 */
proto.error.ComputationError.Sde.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.error.ComputationError.Sde.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.error.ComputationError.Sde.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.error.ComputationError.Sde} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.error.ComputationError.Sde.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.error.ComputationError.Sde.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.error.ComputationError.Sde} returns this
 */
proto.error.ComputationError.Sde.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DestinationPath destination_path = 1;
 * @return {?proto.error.ComputationError.DestinationPath}
 */
proto.error.ComputationError.prototype.getDestinationPath = function() {
  return /** @type{?proto.error.ComputationError.DestinationPath} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.DestinationPath, 1));
};


/**
 * @param {?proto.error.ComputationError.DestinationPath|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setDestinationPath = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearDestinationPath = function() {
  return this.setDestinationPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasDestinationPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SessionCreatingFail session_creating_fail = 2;
 * @return {?proto.error.ComputationError.SessionCreatingFail}
 */
proto.error.ComputationError.prototype.getSessionCreatingFail = function() {
  return /** @type{?proto.error.ComputationError.SessionCreatingFail} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.SessionCreatingFail, 2));
};


/**
 * @param {?proto.error.ComputationError.SessionCreatingFail|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setSessionCreatingFail = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearSessionCreatingFail = function() {
  return this.setSessionCreatingFail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasSessionCreatingFail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Communication communication = 3;
 * @return {?proto.error.ComputationError.Communication}
 */
proto.error.ComputationError.prototype.getCommunication = function() {
  return /** @type{?proto.error.ComputationError.Communication} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.Communication, 3));
};


/**
 * @param {?proto.error.ComputationError.Communication|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setCommunication = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearCommunication = function() {
  return this.setCommunication(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasCommunication = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OperationNotSupported operation_not_supported = 4;
 * @return {?proto.error.ComputationError.OperationNotSupported}
 */
proto.error.ComputationError.prototype.getOperationNotSupported = function() {
  return /** @type{?proto.error.ComputationError.OperationNotSupported} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.OperationNotSupported, 4));
};


/**
 * @param {?proto.error.ComputationError.OperationNotSupported|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setOperationNotSupported = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearOperationNotSupported = function() {
  return this.setOperationNotSupported(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasOperationNotSupported = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional IoOperation io_operation = 5;
 * @return {?proto.error.ComputationError.IoOperation}
 */
proto.error.ComputationError.prototype.getIoOperation = function() {
  return /** @type{?proto.error.ComputationError.IoOperation} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.IoOperation, 5));
};


/**
 * @param {?proto.error.ComputationError.IoOperation|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setIoOperation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearIoOperation = function() {
  return this.setIoOperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasIoOperation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InvalidData invalid_data = 6;
 * @return {?proto.error.ComputationError.InvalidData}
 */
proto.error.ComputationError.prototype.getInvalidData = function() {
  return /** @type{?proto.error.ComputationError.InvalidData} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.InvalidData, 6));
};


/**
 * @param {?proto.error.ComputationError.InvalidData|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setInvalidData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearInvalidData = function() {
  return this.setInvalidData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasInvalidData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional InvalidArgs invalid_args = 7;
 * @return {?proto.error.ComputationError.InvalidArgs}
 */
proto.error.ComputationError.prototype.getInvalidArgs = function() {
  return /** @type{?proto.error.ComputationError.InvalidArgs} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.InvalidArgs, 7));
};


/**
 * @param {?proto.error.ComputationError.InvalidArgs|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setInvalidArgs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearInvalidArgs = function() {
  return this.setInvalidArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasInvalidArgs = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Process process = 8;
 * @return {?proto.error.ComputationError.Process}
 */
proto.error.ComputationError.prototype.getProcess = function() {
  return /** @type{?proto.error.ComputationError.Process} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.Process, 8));
};


/**
 * @param {?proto.error.ComputationError.Process|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setProcess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Protocol protocol = 9;
 * @return {?proto.error.ComputationError.Protocol}
 */
proto.error.ComputationError.prototype.getProtocol = function() {
  return /** @type{?proto.error.ComputationError.Protocol} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.Protocol, 9));
};


/**
 * @param {?proto.error.ComputationError.Protocol|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setProtocol = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearProtocol = function() {
  return this.setProtocol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SearchError search_error = 10;
 * @return {?proto.error.SearchError}
 */
proto.error.ComputationError.prototype.getSearchError = function() {
  return /** @type{?proto.error.SearchError} */ (
    jspb.Message.getWrapperField(this, proto.error.SearchError, 10));
};


/**
 * @param {?proto.error.SearchError|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setSearchError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearSearchError = function() {
  return this.setSearchError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasSearchError = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MultipleInitCall multiple_init_call = 11;
 * @return {?proto.error.ComputationError.MultipleInitCall}
 */
proto.error.ComputationError.prototype.getMultipleInitCall = function() {
  return /** @type{?proto.error.ComputationError.MultipleInitCall} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.MultipleInitCall, 11));
};


/**
 * @param {?proto.error.ComputationError.MultipleInitCall|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setMultipleInitCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearMultipleInitCall = function() {
  return this.setMultipleInitCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasMultipleInitCall = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SessionUnavailable session_unavailable = 12;
 * @return {?proto.error.ComputationError.SessionUnavailable}
 */
proto.error.ComputationError.prototype.getSessionUnavailable = function() {
  return /** @type{?proto.error.ComputationError.SessionUnavailable} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.SessionUnavailable, 12));
};


/**
 * @param {?proto.error.ComputationError.SessionUnavailable|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setSessionUnavailable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearSessionUnavailable = function() {
  return this.setSessionUnavailable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasSessionUnavailable = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional NativeError native_error = 13;
 * @return {?proto.error.NativeError}
 */
proto.error.ComputationError.prototype.getNativeError = function() {
  return /** @type{?proto.error.NativeError} */ (
    jspb.Message.getWrapperField(this, proto.error.NativeError, 13));
};


/**
 * @param {?proto.error.NativeError|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setNativeError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearNativeError = function() {
  return this.setNativeError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasNativeError = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Grabbing grabbing = 14;
 * @return {?proto.error.ComputationError.Grabbing}
 */
proto.error.ComputationError.prototype.getGrabbing = function() {
  return /** @type{?proto.error.ComputationError.Grabbing} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.Grabbing, 14));
};


/**
 * @param {?proto.error.ComputationError.Grabbing|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setGrabbing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearGrabbing = function() {
  return this.setGrabbing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasGrabbing = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Sde sde = 15;
 * @return {?proto.error.ComputationError.Sde}
 */
proto.error.ComputationError.prototype.getSde = function() {
  return /** @type{?proto.error.ComputationError.Sde} */ (
    jspb.Message.getWrapperField(this, proto.error.ComputationError.Sde, 15));
};


/**
 * @param {?proto.error.ComputationError.Sde|undefined} value
 * @return {!proto.error.ComputationError} returns this
*/
proto.error.ComputationError.prototype.setSde = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.error.ComputationError.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.error.ComputationError} returns this
 */
proto.error.ComputationError.prototype.clearSde = function() {
  return this.setSde(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.error.ComputationError.prototype.hasSde = function() {
  return jspb.Message.getField(this, 15) != null;
};


