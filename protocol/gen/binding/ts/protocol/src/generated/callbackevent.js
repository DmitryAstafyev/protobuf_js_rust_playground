// source: event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.event.CallbackEvent');
goog.provide('proto.event.CallbackEvent.AttachmentsUpdated');
goog.provide('proto.event.CallbackEvent.EventCase');
goog.provide('proto.event.CallbackEvent.IndexedMapUpdated');
goog.provide('proto.event.CallbackEvent.OperationError');
goog.provide('proto.event.CallbackEvent.Progress');
goog.provide('proto.event.CallbackEvent.Progress.ProgressDetail');
goog.provide('proto.event.CallbackEvent.Progress.ProgressDetail.DetailCase');
goog.provide('proto.event.CallbackEvent.SearchMapUpdated');
goog.provide('proto.event.CallbackEvent.SearchUpdated');
goog.provide('proto.event.CallbackEvent.SearchValuesUpdated');
goog.provide('proto.event.CallbackEvent.SearchValuesUpdated.ValueRange');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.attachment.AttachmentInfo');
goog.require('proto.error.NativeError');
goog.require('proto.event.Notification');
goog.require('proto.event.OperationDone');
goog.require('proto.event.Ticks');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.event.CallbackEvent.oneofGroups_);
};
goog.inherits(proto.event.CallbackEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.displayName = 'proto.event.CallbackEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.SearchUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.SearchUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.SearchUpdated.displayName = 'proto.event.CallbackEvent.SearchUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.IndexedMapUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.IndexedMapUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.IndexedMapUpdated.displayName = 'proto.event.CallbackEvent.IndexedMapUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.SearchMapUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.SearchMapUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.SearchMapUpdated.displayName = 'proto.event.CallbackEvent.SearchMapUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.SearchValuesUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.SearchValuesUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.SearchValuesUpdated.displayName = 'proto.event.CallbackEvent.SearchValuesUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.SearchValuesUpdated.ValueRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.displayName = 'proto.event.CallbackEvent.SearchValuesUpdated.ValueRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.AttachmentsUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.AttachmentsUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.AttachmentsUpdated.displayName = 'proto.event.CallbackEvent.AttachmentsUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.Progress.displayName = 'proto.event.CallbackEvent.Progress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.Progress.ProgressDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.event.CallbackEvent.Progress.ProgressDetail.oneofGroups_);
};
goog.inherits(proto.event.CallbackEvent.Progress.ProgressDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.Progress.ProgressDetail.displayName = 'proto.event.CallbackEvent.Progress.ProgressDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CallbackEvent.OperationError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CallbackEvent.OperationError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CallbackEvent.OperationError.displayName = 'proto.event.CallbackEvent.OperationError';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.event.CallbackEvent.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14]];

/**
 * @enum {number}
 */
proto.event.CallbackEvent.EventCase = {
  EVENT_NOT_SET: 0,
  STREAM_UPDATED: 1,
  FILE_READ: 2,
  SEARCH_UPDATED: 3,
  INDEXED_MAP_UPDATED: 4,
  SEARCH_MAP_UPDATED: 5,
  SEARCH_VALUES_UPDATED: 6,
  ATTACHMENTS_UPDATED: 7,
  PROGRESS: 8,
  SESSION_ERROR: 9,
  OPERATION_ERROR: 10,
  OPERATION_STARTED: 11,
  OPERATION_PROCESSING: 12,
  OPERATION_DONE: 13,
  SESSION_DESTROYED: 14
};

/**
 * @return {proto.event.CallbackEvent.EventCase}
 */
proto.event.CallbackEvent.prototype.getEventCase = function() {
  return /** @type {proto.event.CallbackEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.event.CallbackEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamUpdated: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fileRead: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    searchUpdated: (f = msg.getSearchUpdated()) && proto.event.CallbackEvent.SearchUpdated.toObject(includeInstance, f),
    indexedMapUpdated: (f = msg.getIndexedMapUpdated()) && proto.event.CallbackEvent.IndexedMapUpdated.toObject(includeInstance, f),
    searchMapUpdated: (f = msg.getSearchMapUpdated()) && proto.event.CallbackEvent.SearchMapUpdated.toObject(includeInstance, f),
    searchValuesUpdated: (f = msg.getSearchValuesUpdated()) && proto.event.CallbackEvent.SearchValuesUpdated.toObject(includeInstance, f),
    attachmentsUpdated: (f = msg.getAttachmentsUpdated()) && proto.event.CallbackEvent.AttachmentsUpdated.toObject(includeInstance, f),
    progress: (f = msg.getProgress()) && proto.event.CallbackEvent.Progress.toObject(includeInstance, f),
    sessionError: (f = msg.getSessionError()) && proto.error.NativeError.toObject(includeInstance, f),
    operationError: (f = msg.getOperationError()) && proto.event.CallbackEvent.OperationError.toObject(includeInstance, f),
    operationStarted: jspb.Message.getFieldWithDefault(msg, 11, ""),
    operationProcessing: jspb.Message.getFieldWithDefault(msg, 12, ""),
    operationDone: (f = msg.getOperationDone()) && proto.event.OperationDone.toObject(includeInstance, f),
    sessionDestroyed: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent}
 */
proto.event.CallbackEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent;
  return proto.event.CallbackEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent}
 */
proto.event.CallbackEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStreamUpdated(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFileRead(value);
      break;
    case 3:
      var value = new proto.event.CallbackEvent.SearchUpdated;
      reader.readMessage(value,proto.event.CallbackEvent.SearchUpdated.deserializeBinaryFromReader);
      msg.setSearchUpdated(value);
      break;
    case 4:
      var value = new proto.event.CallbackEvent.IndexedMapUpdated;
      reader.readMessage(value,proto.event.CallbackEvent.IndexedMapUpdated.deserializeBinaryFromReader);
      msg.setIndexedMapUpdated(value);
      break;
    case 5:
      var value = new proto.event.CallbackEvent.SearchMapUpdated;
      reader.readMessage(value,proto.event.CallbackEvent.SearchMapUpdated.deserializeBinaryFromReader);
      msg.setSearchMapUpdated(value);
      break;
    case 6:
      var value = new proto.event.CallbackEvent.SearchValuesUpdated;
      reader.readMessage(value,proto.event.CallbackEvent.SearchValuesUpdated.deserializeBinaryFromReader);
      msg.setSearchValuesUpdated(value);
      break;
    case 7:
      var value = new proto.event.CallbackEvent.AttachmentsUpdated;
      reader.readMessage(value,proto.event.CallbackEvent.AttachmentsUpdated.deserializeBinaryFromReader);
      msg.setAttachmentsUpdated(value);
      break;
    case 8:
      var value = new proto.event.CallbackEvent.Progress;
      reader.readMessage(value,proto.event.CallbackEvent.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 9:
      var value = new proto.error.NativeError;
      reader.readMessage(value,proto.error.NativeError.deserializeBinaryFromReader);
      msg.setSessionError(value);
      break;
    case 10:
      var value = new proto.event.CallbackEvent.OperationError;
      reader.readMessage(value,proto.event.CallbackEvent.OperationError.deserializeBinaryFromReader);
      msg.setOperationError(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationStarted(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationProcessing(value);
      break;
    case 13:
      var value = new proto.event.OperationDone;
      reader.readMessage(value,proto.event.OperationDone.deserializeBinaryFromReader);
      msg.setOperationDone(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSessionDestroyed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSearchUpdated();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.event.CallbackEvent.SearchUpdated.serializeBinaryToWriter
    );
  }
  f = message.getIndexedMapUpdated();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.event.CallbackEvent.IndexedMapUpdated.serializeBinaryToWriter
    );
  }
  f = message.getSearchMapUpdated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.event.CallbackEvent.SearchMapUpdated.serializeBinaryToWriter
    );
  }
  f = message.getSearchValuesUpdated();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.event.CallbackEvent.SearchValuesUpdated.serializeBinaryToWriter
    );
  }
  f = message.getAttachmentsUpdated();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.event.CallbackEvent.AttachmentsUpdated.serializeBinaryToWriter
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.event.CallbackEvent.Progress.serializeBinaryToWriter
    );
  }
  f = message.getSessionError();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.error.NativeError.serializeBinaryToWriter
    );
  }
  f = message.getOperationError();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.event.CallbackEvent.OperationError.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getOperationDone();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.event.OperationDone.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.SearchUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.SearchUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.SearchUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    found: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statMap: (f = msg.getStatMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.SearchUpdated}
 */
proto.event.CallbackEvent.SearchUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.SearchUpdated;
  return proto.event.CallbackEvent.SearchUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.SearchUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.SearchUpdated}
 */
proto.event.CallbackEvent.SearchUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFound(value);
      break;
    case 2:
      var value = msg.getStatMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.SearchUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.SearchUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.SearchUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFound();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
};


/**
 * optional uint64 found = 1;
 * @return {number}
 */
proto.event.CallbackEvent.SearchUpdated.prototype.getFound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CallbackEvent.SearchUpdated} returns this
 */
proto.event.CallbackEvent.SearchUpdated.prototype.setFound = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, uint64> stat = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.event.CallbackEvent.SearchUpdated.prototype.getStatMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.CallbackEvent.SearchUpdated} returns this
 */
proto.event.CallbackEvent.SearchUpdated.prototype.clearStatMap = function() {
  this.getStatMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.IndexedMapUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.IndexedMapUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.IndexedMapUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.IndexedMapUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    len: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.IndexedMapUpdated}
 */
proto.event.CallbackEvent.IndexedMapUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.IndexedMapUpdated;
  return proto.event.CallbackEvent.IndexedMapUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.IndexedMapUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.IndexedMapUpdated}
 */
proto.event.CallbackEvent.IndexedMapUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.IndexedMapUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.IndexedMapUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.IndexedMapUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.IndexedMapUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLen();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 len = 1;
 * @return {number}
 */
proto.event.CallbackEvent.IndexedMapUpdated.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CallbackEvent.IndexedMapUpdated} returns this
 */
proto.event.CallbackEvent.IndexedMapUpdated.prototype.setLen = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.SearchMapUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.SearchMapUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.SearchMapUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchMapUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    update: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.SearchMapUpdated}
 */
proto.event.CallbackEvent.SearchMapUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.SearchMapUpdated;
  return proto.event.CallbackEvent.SearchMapUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.SearchMapUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.SearchMapUpdated}
 */
proto.event.CallbackEvent.SearchMapUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.SearchMapUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.SearchMapUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.SearchMapUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchMapUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string update = 1;
 * @return {string}
 */
proto.event.CallbackEvent.SearchMapUpdated.prototype.getUpdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CallbackEvent.SearchMapUpdated} returns this
 */
proto.event.CallbackEvent.SearchMapUpdated.prototype.setUpdate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.SearchValuesUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.SearchValuesUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.SearchValuesUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchValuesUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.SearchValuesUpdated}
 */
proto.event.CallbackEvent.SearchValuesUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.SearchValuesUpdated;
  return proto.event.CallbackEvent.SearchValuesUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.SearchValuesUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.SearchValuesUpdated}
 */
proto.event.CallbackEvent.SearchValuesUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.deserializeBinaryFromReader, 0, new proto.event.CallbackEvent.SearchValuesUpdated.ValueRange());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.SearchValuesUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.SearchValuesUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.SearchValuesUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchValuesUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange}
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.SearchValuesUpdated.ValueRange;
  return proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange}
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double min = 1;
 * @return {number}
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange} returns this
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double max = 2;
 * @return {number}
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange} returns this
 */
proto.event.CallbackEvent.SearchValuesUpdated.ValueRange.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * map<uint32, ValueRange> values = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange>}
 */
proto.event.CallbackEvent.SearchValuesUpdated.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.event.CallbackEvent.SearchValuesUpdated.ValueRange>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.event.CallbackEvent.SearchValuesUpdated.ValueRange));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.CallbackEvent.SearchValuesUpdated} returns this
 */
proto.event.CallbackEvent.SearchValuesUpdated.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.AttachmentsUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.AttachmentsUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.AttachmentsUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.AttachmentsUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    len: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attachment: (f = msg.getAttachment()) && proto.attachment.AttachmentInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.AttachmentsUpdated}
 */
proto.event.CallbackEvent.AttachmentsUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.AttachmentsUpdated;
  return proto.event.CallbackEvent.AttachmentsUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.AttachmentsUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.AttachmentsUpdated}
 */
proto.event.CallbackEvent.AttachmentsUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLen(value);
      break;
    case 2:
      var value = new proto.attachment.AttachmentInfo;
      reader.readMessage(value,proto.attachment.AttachmentInfo.deserializeBinaryFromReader);
      msg.setAttachment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.AttachmentsUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.AttachmentsUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.AttachmentsUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.AttachmentsUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLen();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAttachment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.attachment.AttachmentInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 len = 1;
 * @return {number}
 */
proto.event.CallbackEvent.AttachmentsUpdated.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CallbackEvent.AttachmentsUpdated} returns this
 */
proto.event.CallbackEvent.AttachmentsUpdated.prototype.setLen = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional attachment.AttachmentInfo attachment = 2;
 * @return {?proto.attachment.AttachmentInfo}
 */
proto.event.CallbackEvent.AttachmentsUpdated.prototype.getAttachment = function() {
  return /** @type{?proto.attachment.AttachmentInfo} */ (
    jspb.Message.getWrapperField(this, proto.attachment.AttachmentInfo, 2));
};


/**
 * @param {?proto.attachment.AttachmentInfo|undefined} value
 * @return {!proto.event.CallbackEvent.AttachmentsUpdated} returns this
*/
proto.event.CallbackEvent.AttachmentsUpdated.prototype.setAttachment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent.AttachmentsUpdated} returns this
 */
proto.event.CallbackEvent.AttachmentsUpdated.prototype.clearAttachment = function() {
  return this.setAttachment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.AttachmentsUpdated.prototype.hasAttachment = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.Progress.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    detail: (f = msg.getDetail()) && proto.event.CallbackEvent.Progress.ProgressDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.Progress}
 */
proto.event.CallbackEvent.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.Progress;
  return proto.event.CallbackEvent.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.Progress}
 */
proto.event.CallbackEvent.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.event.CallbackEvent.Progress.ProgressDetail;
      reader.readMessage(value,proto.event.CallbackEvent.Progress.ProgressDetail.deserializeBinaryFromReader);
      msg.setDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDetail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event.CallbackEvent.Progress.ProgressDetail.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.event.CallbackEvent.Progress.ProgressDetail.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.DetailCase = {
  DETAIL_NOT_SET: 0,
  TICKS: 1,
  NOTIFICATION: 2,
  STOPPED: 3
};

/**
 * @return {proto.event.CallbackEvent.Progress.ProgressDetail.DetailCase}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.getDetailCase = function() {
  return /** @type {proto.event.CallbackEvent.Progress.ProgressDetail.DetailCase} */(jspb.Message.computeOneofCase(this, proto.event.CallbackEvent.Progress.ProgressDetail.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.Progress.ProgressDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.Progress.ProgressDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.Progress.ProgressDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticks: (f = msg.getTicks()) && proto.event.Ticks.toObject(includeInstance, f),
    notification: (f = msg.getNotification()) && proto.event.Notification.toObject(includeInstance, f),
    stopped: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.Progress.ProgressDetail;
  return proto.event.CallbackEvent.Progress.ProgressDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.Progress.ProgressDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.Ticks;
      reader.readMessage(value,proto.event.Ticks.deserializeBinaryFromReader);
      msg.setTicks(value);
      break;
    case 2:
      var value = new proto.event.Notification;
      reader.readMessage(value,proto.event.Notification.deserializeBinaryFromReader);
      msg.setNotification(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStopped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.Progress.ProgressDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.Progress.ProgressDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.Progress.ProgressDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicks();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.event.Ticks.serializeBinaryToWriter
    );
  }
  f = message.getNotification();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.event.Notification.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Ticks ticks = 1;
 * @return {?proto.event.Ticks}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.getTicks = function() {
  return /** @type{?proto.event.Ticks} */ (
    jspb.Message.getWrapperField(this, proto.event.Ticks, 1));
};


/**
 * @param {?proto.event.Ticks|undefined} value
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail} returns this
*/
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.setTicks = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.event.CallbackEvent.Progress.ProgressDetail.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail} returns this
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.clearTicks = function() {
  return this.setTicks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.hasTicks = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Notification notification = 2;
 * @return {?proto.event.Notification}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.getNotification = function() {
  return /** @type{?proto.event.Notification} */ (
    jspb.Message.getWrapperField(this, proto.event.Notification, 2));
};


/**
 * @param {?proto.event.Notification|undefined} value
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail} returns this
*/
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.setNotification = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.event.CallbackEvent.Progress.ProgressDetail.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail} returns this
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.clearNotification = function() {
  return this.setNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.hasNotification = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool stopped = 3;
 * @return {boolean}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.getStopped = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail} returns this
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.setStopped = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.event.CallbackEvent.Progress.ProgressDetail.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.event.CallbackEvent.Progress.ProgressDetail} returns this
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.clearStopped = function() {
  return jspb.Message.setOneofField(this, 3, proto.event.CallbackEvent.Progress.ProgressDetail.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.Progress.ProgressDetail.prototype.hasStopped = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.event.CallbackEvent.Progress.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CallbackEvent.Progress} returns this
 */
proto.event.CallbackEvent.Progress.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProgressDetail detail = 2;
 * @return {?proto.event.CallbackEvent.Progress.ProgressDetail}
 */
proto.event.CallbackEvent.Progress.prototype.getDetail = function() {
  return /** @type{?proto.event.CallbackEvent.Progress.ProgressDetail} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.Progress.ProgressDetail, 2));
};


/**
 * @param {?proto.event.CallbackEvent.Progress.ProgressDetail|undefined} value
 * @return {!proto.event.CallbackEvent.Progress} returns this
*/
proto.event.CallbackEvent.Progress.prototype.setDetail = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent.Progress} returns this
 */
proto.event.CallbackEvent.Progress.prototype.clearDetail = function() {
  return this.setDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.Progress.prototype.hasDetail = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CallbackEvent.OperationError.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CallbackEvent.OperationError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CallbackEvent.OperationError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.OperationError.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: (f = msg.getError()) && proto.error.NativeError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CallbackEvent.OperationError}
 */
proto.event.CallbackEvent.OperationError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CallbackEvent.OperationError;
  return proto.event.CallbackEvent.OperationError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CallbackEvent.OperationError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CallbackEvent.OperationError}
 */
proto.event.CallbackEvent.OperationError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.error.NativeError;
      reader.readMessage(value,proto.error.NativeError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CallbackEvent.OperationError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CallbackEvent.OperationError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CallbackEvent.OperationError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CallbackEvent.OperationError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.error.NativeError.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.event.CallbackEvent.OperationError.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CallbackEvent.OperationError} returns this
 */
proto.event.CallbackEvent.OperationError.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional error.NativeError error = 2;
 * @return {?proto.error.NativeError}
 */
proto.event.CallbackEvent.OperationError.prototype.getError = function() {
  return /** @type{?proto.error.NativeError} */ (
    jspb.Message.getWrapperField(this, proto.error.NativeError, 2));
};


/**
 * @param {?proto.error.NativeError|undefined} value
 * @return {!proto.event.CallbackEvent.OperationError} returns this
*/
proto.event.CallbackEvent.OperationError.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent.OperationError} returns this
 */
proto.event.CallbackEvent.OperationError.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.OperationError.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 stream_updated = 1;
 * @return {number}
 */
proto.event.CallbackEvent.prototype.getStreamUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.setStreamUpdated = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearStreamUpdated = function() {
  return jspb.Message.setOneofField(this, 1, proto.event.CallbackEvent.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasStreamUpdated = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool file_read = 2;
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.getFileRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.setFileRead = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearFileRead = function() {
  return jspb.Message.setOneofField(this, 2, proto.event.CallbackEvent.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasFileRead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SearchUpdated search_updated = 3;
 * @return {?proto.event.CallbackEvent.SearchUpdated}
 */
proto.event.CallbackEvent.prototype.getSearchUpdated = function() {
  return /** @type{?proto.event.CallbackEvent.SearchUpdated} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.SearchUpdated, 3));
};


/**
 * @param {?proto.event.CallbackEvent.SearchUpdated|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setSearchUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearSearchUpdated = function() {
  return this.setSearchUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasSearchUpdated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IndexedMapUpdated indexed_map_updated = 4;
 * @return {?proto.event.CallbackEvent.IndexedMapUpdated}
 */
proto.event.CallbackEvent.prototype.getIndexedMapUpdated = function() {
  return /** @type{?proto.event.CallbackEvent.IndexedMapUpdated} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.IndexedMapUpdated, 4));
};


/**
 * @param {?proto.event.CallbackEvent.IndexedMapUpdated|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setIndexedMapUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearIndexedMapUpdated = function() {
  return this.setIndexedMapUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasIndexedMapUpdated = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SearchMapUpdated search_map_updated = 5;
 * @return {?proto.event.CallbackEvent.SearchMapUpdated}
 */
proto.event.CallbackEvent.prototype.getSearchMapUpdated = function() {
  return /** @type{?proto.event.CallbackEvent.SearchMapUpdated} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.SearchMapUpdated, 5));
};


/**
 * @param {?proto.event.CallbackEvent.SearchMapUpdated|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setSearchMapUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearSearchMapUpdated = function() {
  return this.setSearchMapUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasSearchMapUpdated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SearchValuesUpdated search_values_updated = 6;
 * @return {?proto.event.CallbackEvent.SearchValuesUpdated}
 */
proto.event.CallbackEvent.prototype.getSearchValuesUpdated = function() {
  return /** @type{?proto.event.CallbackEvent.SearchValuesUpdated} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.SearchValuesUpdated, 6));
};


/**
 * @param {?proto.event.CallbackEvent.SearchValuesUpdated|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setSearchValuesUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearSearchValuesUpdated = function() {
  return this.setSearchValuesUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasSearchValuesUpdated = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional AttachmentsUpdated attachments_updated = 7;
 * @return {?proto.event.CallbackEvent.AttachmentsUpdated}
 */
proto.event.CallbackEvent.prototype.getAttachmentsUpdated = function() {
  return /** @type{?proto.event.CallbackEvent.AttachmentsUpdated} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.AttachmentsUpdated, 7));
};


/**
 * @param {?proto.event.CallbackEvent.AttachmentsUpdated|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setAttachmentsUpdated = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearAttachmentsUpdated = function() {
  return this.setAttachmentsUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasAttachmentsUpdated = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Progress progress = 8;
 * @return {?proto.event.CallbackEvent.Progress}
 */
proto.event.CallbackEvent.prototype.getProgress = function() {
  return /** @type{?proto.event.CallbackEvent.Progress} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.Progress, 8));
};


/**
 * @param {?proto.event.CallbackEvent.Progress|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setProgress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearProgress = function() {
  return this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional error.NativeError session_error = 9;
 * @return {?proto.error.NativeError}
 */
proto.event.CallbackEvent.prototype.getSessionError = function() {
  return /** @type{?proto.error.NativeError} */ (
    jspb.Message.getWrapperField(this, proto.error.NativeError, 9));
};


/**
 * @param {?proto.error.NativeError|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setSessionError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearSessionError = function() {
  return this.setSessionError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasSessionError = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OperationError operation_error = 10;
 * @return {?proto.event.CallbackEvent.OperationError}
 */
proto.event.CallbackEvent.prototype.getOperationError = function() {
  return /** @type{?proto.event.CallbackEvent.OperationError} */ (
    jspb.Message.getWrapperField(this, proto.event.CallbackEvent.OperationError, 10));
};


/**
 * @param {?proto.event.CallbackEvent.OperationError|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setOperationError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearOperationError = function() {
  return this.setOperationError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasOperationError = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string operation_started = 11;
 * @return {string}
 */
proto.event.CallbackEvent.prototype.getOperationStarted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.setOperationStarted = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearOperationStarted = function() {
  return jspb.Message.setOneofField(this, 11, proto.event.CallbackEvent.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasOperationStarted = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string operation_processing = 12;
 * @return {string}
 */
proto.event.CallbackEvent.prototype.getOperationProcessing = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.setOperationProcessing = function(value) {
  return jspb.Message.setOneofField(this, 12, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearOperationProcessing = function() {
  return jspb.Message.setOneofField(this, 12, proto.event.CallbackEvent.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasOperationProcessing = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional OperationDone operation_done = 13;
 * @return {?proto.event.OperationDone}
 */
proto.event.CallbackEvent.prototype.getOperationDone = function() {
  return /** @type{?proto.event.OperationDone} */ (
    jspb.Message.getWrapperField(this, proto.event.OperationDone, 13));
};


/**
 * @param {?proto.event.OperationDone|undefined} value
 * @return {!proto.event.CallbackEvent} returns this
*/
proto.event.CallbackEvent.prototype.setOperationDone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearOperationDone = function() {
  return this.setOperationDone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasOperationDone = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool session_destroyed = 14;
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.getSessionDestroyed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.setSessionDestroyed = function(value) {
  return jspb.Message.setOneofField(this, 14, proto.event.CallbackEvent.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.event.CallbackEvent} returns this
 */
proto.event.CallbackEvent.prototype.clearSessionDestroyed = function() {
  return jspb.Message.setOneofField(this, 14, proto.event.CallbackEvent.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.event.CallbackEvent.prototype.hasSessionDestroyed = function() {
  return jspb.Message.getField(this, 14) != null;
};


