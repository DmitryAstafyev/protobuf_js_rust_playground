// source: commands.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.commands.Output');
goog.provide('proto.commands.Output.Empty');
goog.provide('proto.commands.Output.OutputCase');
goog.provide('proto.commands.Output.StringVec');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commands.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.commands.Output.oneofGroups_);
};
goog.inherits(proto.commands.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commands.Output.displayName = 'proto.commands.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commands.Output.StringVec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.commands.Output.StringVec.repeatedFields_, null);
};
goog.inherits(proto.commands.Output.StringVec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commands.Output.StringVec.displayName = 'proto.commands.Output.StringVec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commands.Output.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commands.Output.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commands.Output.Empty.displayName = 'proto.commands.Output.Empty';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.commands.Output.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.commands.Output.OutputCase = {
  OUTPUT_NOT_SET: 0,
  STRINGVALUE: 1,
  STRINGVECVALUE: 2,
  OPTIONSTRINGVALUE: 3,
  BOOLVALUE: 4,
  INT64VALUE: 5,
  EMPTYVALUE: 6
};

/**
 * @return {proto.commands.Output.OutputCase}
 */
proto.commands.Output.prototype.getOutputCase = function() {
  return /** @type {proto.commands.Output.OutputCase} */(jspb.Message.computeOneofCase(this, proto.commands.Output.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commands.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.commands.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commands.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commands.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringvalue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringvecvalue: (f = msg.getStringvecvalue()) && proto.commands.Output.StringVec.toObject(includeInstance, f),
    optionstringvalue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boolvalue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    int64value: jspb.Message.getFieldWithDefault(msg, 5, 0),
    emptyvalue: (f = msg.getEmptyvalue()) && proto.commands.Output.Empty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commands.Output}
 */
proto.commands.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commands.Output;
  return proto.commands.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commands.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commands.Output}
 */
proto.commands.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 2:
      var value = new proto.commands.Output.StringVec;
      reader.readMessage(value,proto.commands.Output.StringVec.deserializeBinaryFromReader);
      msg.setStringvecvalue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptionstringvalue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolvalue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64value(value);
      break;
    case 6:
      var value = new proto.commands.Output.Empty;
      reader.readMessage(value,proto.commands.Output.Empty.deserializeBinaryFromReader);
      msg.setEmptyvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commands.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commands.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commands.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commands.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStringvecvalue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.commands.Output.StringVec.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getEmptyvalue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.commands.Output.Empty.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.commands.Output.StringVec.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commands.Output.StringVec.prototype.toObject = function(opt_includeInstance) {
  return proto.commands.Output.StringVec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commands.Output.StringVec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commands.Output.StringVec.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commands.Output.StringVec}
 */
proto.commands.Output.StringVec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commands.Output.StringVec;
  return proto.commands.Output.StringVec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commands.Output.StringVec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commands.Output.StringVec}
 */
proto.commands.Output.StringVec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commands.Output.StringVec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commands.Output.StringVec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commands.Output.StringVec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commands.Output.StringVec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.commands.Output.StringVec.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.commands.Output.StringVec} returns this
 */
proto.commands.Output.StringVec.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.commands.Output.StringVec} returns this
 */
proto.commands.Output.StringVec.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.commands.Output.StringVec} returns this
 */
proto.commands.Output.StringVec.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commands.Output.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.commands.Output.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commands.Output.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commands.Output.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commands.Output.Empty}
 */
proto.commands.Output.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commands.Output.Empty;
  return proto.commands.Output.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commands.Output.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commands.Output.Empty}
 */
proto.commands.Output.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commands.Output.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commands.Output.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commands.Output.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commands.Output.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string stringValue = 1;
 * @return {string}
 */
proto.commands.Output.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.setStringvalue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.commands.Output.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.clearStringvalue = function() {
  return jspb.Message.setOneofField(this, 1, proto.commands.Output.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commands.Output.prototype.hasStringvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringVec stringVecValue = 2;
 * @return {?proto.commands.Output.StringVec}
 */
proto.commands.Output.prototype.getStringvecvalue = function() {
  return /** @type{?proto.commands.Output.StringVec} */ (
    jspb.Message.getWrapperField(this, proto.commands.Output.StringVec, 2));
};


/**
 * @param {?proto.commands.Output.StringVec|undefined} value
 * @return {!proto.commands.Output} returns this
*/
proto.commands.Output.prototype.setStringvecvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.commands.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.clearStringvecvalue = function() {
  return this.setStringvecvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commands.Output.prototype.hasStringvecvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string optionStringValue = 3;
 * @return {string}
 */
proto.commands.Output.prototype.getOptionstringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.setOptionstringvalue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.commands.Output.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.clearOptionstringvalue = function() {
  return jspb.Message.setOneofField(this, 3, proto.commands.Output.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commands.Output.prototype.hasOptionstringvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool boolValue = 4;
 * @return {boolean}
 */
proto.commands.Output.prototype.getBoolvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.setBoolvalue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.commands.Output.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.clearBoolvalue = function() {
  return jspb.Message.setOneofField(this, 4, proto.commands.Output.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commands.Output.prototype.hasBoolvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 int64Value = 5;
 * @return {number}
 */
proto.commands.Output.prototype.getInt64value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.setInt64value = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.commands.Output.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.clearInt64value = function() {
  return jspb.Message.setOneofField(this, 5, proto.commands.Output.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commands.Output.prototype.hasInt64value = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Empty emptyValue = 6;
 * @return {?proto.commands.Output.Empty}
 */
proto.commands.Output.prototype.getEmptyvalue = function() {
  return /** @type{?proto.commands.Output.Empty} */ (
    jspb.Message.getWrapperField(this, proto.commands.Output.Empty, 6));
};


/**
 * @param {?proto.commands.Output.Empty|undefined} value
 * @return {!proto.commands.Output} returns this
*/
proto.commands.Output.prototype.setEmptyvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.commands.Output.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.commands.Output} returns this
 */
proto.commands.Output.prototype.clearEmptyvalue = function() {
  return this.setEmptyvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commands.Output.prototype.hasEmptyvalue = function() {
  return jspb.Message.getField(this, 6) != null;
};


