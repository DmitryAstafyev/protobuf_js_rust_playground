/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.2
 * source: progress.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
export namespace progress {
    export class Ticks extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      count?: number;
                      state?: string;
                      total?: number;
                  },
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls,
            );
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('count' in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ('state' in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ('total' in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: { count?: number; state?: string; total?: number }): Ticks {
            const message = new Ticks({});
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                count?: number;
                state?: string;
                total?: number;
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != 0) writer.writeUint64(1, this.count);
            if (this.state.length) writer.writeString(2, this.state);
            if (this.total != 0) writer.writeUint64(3, this.total);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ticks {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new Ticks();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readUint64();
                        break;
                    case 2:
                        message.state = reader.readString();
                        break;
                    case 3:
                        message.total = reader.readUint64();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Ticks {
            return Ticks.deserialize(bytes);
        }
    }
    export class LifecycleTransition extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(
            data?:
                | any[]
                | ({} & (
                      | {
                            started?: Started;
                            ticks?: never;
                            stopped?: never;
                        }
                      | {
                            started?: never;
                            ticks?: TicksWithUuid;
                            stopped?: never;
                        }
                      | {
                            started?: never;
                            ticks?: never;
                            stopped?: Stopped;
                        }
                  )),
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls,
            );
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('started' in data && data.started != undefined) {
                    this.started = data.started;
                }
                if ('ticks' in data && data.ticks != undefined) {
                    this.ticks = data.ticks;
                }
                if ('stopped' in data && data.stopped != undefined) {
                    this.stopped = data.stopped;
                }
            }
        }
        get started() {
            return pb_1.Message.getWrapperField(this, Started, 1) as Started;
        }
        set started(value: Started) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_started() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ticks() {
            return pb_1.Message.getWrapperField(this, TicksWithUuid, 2) as TicksWithUuid;
        }
        set ticks(value: TicksWithUuid) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ticks() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get stopped() {
            return pb_1.Message.getWrapperField(this, Stopped, 3) as Stopped;
        }
        set stopped(value: Stopped) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_stopped() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get transition() {
            const cases: {
                [index: number]: 'none' | 'started' | 'ticks' | 'stopped';
            } = {
                0: 'none',
                1: 'started',
                2: 'ticks',
                3: 'stopped',
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            started?: ReturnType<typeof Started.prototype.toObject>;
            ticks?: ReturnType<typeof TicksWithUuid.prototype.toObject>;
            stopped?: ReturnType<typeof Stopped.prototype.toObject>;
        }): LifecycleTransition {
            const message = new LifecycleTransition({});
            if (data.started != null) {
                message.started = Started.fromObject(data.started);
            }
            if (data.ticks != null) {
                message.ticks = TicksWithUuid.fromObject(data.ticks);
            }
            if (data.stopped != null) {
                message.stopped = Stopped.fromObject(data.stopped);
            }
            return message;
        }
        toObject() {
            const data: {
                started?: ReturnType<typeof Started.prototype.toObject>;
                ticks?: ReturnType<typeof TicksWithUuid.prototype.toObject>;
                stopped?: ReturnType<typeof Stopped.prototype.toObject>;
            } = {};
            if (this.started != null) {
                data.started = this.started.toObject();
            }
            if (this.ticks != null) {
                data.ticks = this.ticks.toObject();
            }
            if (this.stopped != null) {
                data.stopped = this.stopped.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_started)
                writer.writeMessage(1, this.started, () => this.started.serialize(writer));
            if (this.has_ticks)
                writer.writeMessage(2, this.ticks, () => this.ticks.serialize(writer));
            if (this.has_stopped)
                writer.writeMessage(3, this.stopped, () => this.stopped.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LifecycleTransition {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new LifecycleTransition();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(
                            message.started,
                            () => (message.started = Started.deserialize(reader)),
                        );
                        break;
                    case 2:
                        reader.readMessage(
                            message.ticks,
                            () => (message.ticks = TicksWithUuid.deserialize(reader)),
                        );
                        break;
                    case 3:
                        reader.readMessage(
                            message.stopped,
                            () => (message.stopped = Stopped.deserialize(reader)),
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): LifecycleTransition {
            return LifecycleTransition.deserialize(bytes);
        }
    }
    export class Started extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      uuid?: string;
                      alias?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls,
            );
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('uuid' in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ('alias' in data && data.alias != undefined) {
                    this.alias = data.alias;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get alias() {
            return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
        }
        set alias(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: { uuid?: string; alias?: string }): Started {
            const message = new Started({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.alias != null) {
                message.alias = data.alias;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
                alias?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.alias != null) {
                data.alias = this.alias;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length) writer.writeString(1, this.uuid);
            if (this.alias.length) writer.writeString(2, this.alias);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Started {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new Started();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    case 2:
                        message.alias = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Started {
            return Started.deserialize(bytes);
        }
    }
    export class TicksWithUuid extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      uuid?: string;
                      ticks?: Ticks;
                  },
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls,
            );
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('uuid' in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ('ticks' in data && data.ticks != undefined) {
                    this.ticks = data.ticks;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticks() {
            return pb_1.Message.getWrapperField(this, Ticks, 2) as Ticks;
        }
        set ticks(value: Ticks) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_ticks() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            uuid?: string;
            ticks?: ReturnType<typeof Ticks.prototype.toObject>;
        }): TicksWithUuid {
            const message = new TicksWithUuid({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.ticks != null) {
                message.ticks = Ticks.fromObject(data.ticks);
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
                ticks?: ReturnType<typeof Ticks.prototype.toObject>;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.ticks != null) {
                data.ticks = this.ticks.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length) writer.writeString(1, this.uuid);
            if (this.has_ticks)
                writer.writeMessage(2, this.ticks, () => this.ticks.serialize(writer));
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicksWithUuid {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new TicksWithUuid();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(
                            message.ticks,
                            () => (message.ticks = Ticks.deserialize(reader)),
                        );
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): TicksWithUuid {
            return TicksWithUuid.deserialize(bytes);
        }
    }
    export class Stopped extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(
            data?:
                | any[]
                | {
                      uuid?: string;
                  },
        ) {
            super();
            pb_1.Message.initialize(
                this,
                Array.isArray(data) ? data : [],
                0,
                -1,
                [],
                this.#one_of_decls,
            );
            if (!Array.isArray(data) && typeof data == 'object') {
                if ('uuid' in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: { uuid?: string }): Stopped {
            const message = new Stopped({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length) writer.writeString(1, this.uuid);
            if (!w) return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stopped {
            const reader =
                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
                message = new Stopped();
            while (reader.nextField()) {
                if (reader.isEndGroup()) break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    default:
                        reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Stopped {
            return Stopped.deserialize(bytes);
        }
    }
}
