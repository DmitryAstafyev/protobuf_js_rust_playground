// source: observe.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.observe.ObserveOrigin');
goog.provide('proto.observe.ObserveOrigin.Concat');
goog.provide('proto.observe.ObserveOrigin.File');
goog.provide('proto.observe.ObserveOrigin.OriginCase');
goog.provide('proto.observe.ObserveOrigin.Stream');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.observe.Transport');

goog.forwardDeclare('proto.observe.FileFormat.Type');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observe.ObserveOrigin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.observe.ObserveOrigin.oneofGroups_);
};
goog.inherits(proto.observe.ObserveOrigin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observe.ObserveOrigin.displayName = 'proto.observe.ObserveOrigin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observe.ObserveOrigin.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observe.ObserveOrigin.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observe.ObserveOrigin.File.displayName = 'proto.observe.ObserveOrigin.File';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observe.ObserveOrigin.Concat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.observe.ObserveOrigin.Concat.repeatedFields_, null);
};
goog.inherits(proto.observe.ObserveOrigin.Concat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observe.ObserveOrigin.Concat.displayName = 'proto.observe.ObserveOrigin.Concat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.observe.ObserveOrigin.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.observe.ObserveOrigin.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.observe.ObserveOrigin.Stream.displayName = 'proto.observe.ObserveOrigin.Stream';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.observe.ObserveOrigin.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.observe.ObserveOrigin.OriginCase = {
  ORIGIN_NOT_SET: 0,
  FILE: 1,
  CONCAT: 2,
  STREAM: 3
};

/**
 * @return {proto.observe.ObserveOrigin.OriginCase}
 */
proto.observe.ObserveOrigin.prototype.getOriginCase = function() {
  return /** @type {proto.observe.ObserveOrigin.OriginCase} */(jspb.Message.computeOneofCase(this, proto.observe.ObserveOrigin.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observe.ObserveOrigin.prototype.toObject = function(opt_includeInstance) {
  return proto.observe.ObserveOrigin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observe.ObserveOrigin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && proto.observe.ObserveOrigin.File.toObject(includeInstance, f),
    concat: (f = msg.getConcat()) && proto.observe.ObserveOrigin.Concat.toObject(includeInstance, f),
    stream: (f = msg.getStream()) && proto.observe.ObserveOrigin.Stream.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observe.ObserveOrigin}
 */
proto.observe.ObserveOrigin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observe.ObserveOrigin;
  return proto.observe.ObserveOrigin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observe.ObserveOrigin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observe.ObserveOrigin}
 */
proto.observe.ObserveOrigin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.observe.ObserveOrigin.File;
      reader.readMessage(value,proto.observe.ObserveOrigin.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = new proto.observe.ObserveOrigin.Concat;
      reader.readMessage(value,proto.observe.ObserveOrigin.Concat.deserializeBinaryFromReader);
      msg.setConcat(value);
      break;
    case 3:
      var value = new proto.observe.ObserveOrigin.Stream;
      reader.readMessage(value,proto.observe.ObserveOrigin.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observe.ObserveOrigin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observe.ObserveOrigin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observe.ObserveOrigin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.observe.ObserveOrigin.File.serializeBinaryToWriter
    );
  }
  f = message.getConcat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.observe.ObserveOrigin.Concat.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.observe.ObserveOrigin.Stream.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observe.ObserveOrigin.File.prototype.toObject = function(opt_includeInstance) {
  return proto.observe.ObserveOrigin.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observe.ObserveOrigin.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.File.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    format: jspb.Message.getFieldWithDefault(msg, 2, 0),
    path: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observe.ObserveOrigin.File}
 */
proto.observe.ObserveOrigin.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observe.ObserveOrigin.File;
  return proto.observe.ObserveOrigin.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observe.ObserveOrigin.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observe.ObserveOrigin.File}
 */
proto.observe.ObserveOrigin.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.observe.FileFormat.Type} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observe.ObserveOrigin.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observe.ObserveOrigin.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observe.ObserveOrigin.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.observe.ObserveOrigin.File.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.observe.ObserveOrigin.File} returns this
 */
proto.observe.ObserveOrigin.File.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FileFormat.Type format = 2;
 * @return {!proto.observe.FileFormat.Type}
 */
proto.observe.ObserveOrigin.File.prototype.getFormat = function() {
  return /** @type {!proto.observe.FileFormat.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.observe.FileFormat.Type} value
 * @return {!proto.observe.ObserveOrigin.File} returns this
 */
proto.observe.ObserveOrigin.File.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.observe.ObserveOrigin.File.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.observe.ObserveOrigin.File} returns this
 */
proto.observe.ObserveOrigin.File.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.observe.ObserveOrigin.Concat.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observe.ObserveOrigin.Concat.prototype.toObject = function(opt_includeInstance) {
  return proto.observe.ObserveOrigin.Concat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observe.ObserveOrigin.Concat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.Concat.toObject = function(includeInstance, msg) {
  var f, obj = {
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    proto.observe.ObserveOrigin.File.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observe.ObserveOrigin.Concat}
 */
proto.observe.ObserveOrigin.Concat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observe.ObserveOrigin.Concat;
  return proto.observe.ObserveOrigin.Concat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observe.ObserveOrigin.Concat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observe.ObserveOrigin.Concat}
 */
proto.observe.ObserveOrigin.Concat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.observe.ObserveOrigin.File;
      reader.readMessage(value,proto.observe.ObserveOrigin.File.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observe.ObserveOrigin.Concat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observe.ObserveOrigin.Concat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observe.ObserveOrigin.Concat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.Concat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.observe.ObserveOrigin.File.serializeBinaryToWriter
    );
  }
};


/**
 * repeated File files = 1;
 * @return {!Array<!proto.observe.ObserveOrigin.File>}
 */
proto.observe.ObserveOrigin.Concat.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.observe.ObserveOrigin.File>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.observe.ObserveOrigin.File, 1));
};


/**
 * @param {!Array<!proto.observe.ObserveOrigin.File>} value
 * @return {!proto.observe.ObserveOrigin.Concat} returns this
*/
proto.observe.ObserveOrigin.Concat.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.observe.ObserveOrigin.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.observe.ObserveOrigin.File}
 */
proto.observe.ObserveOrigin.Concat.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.observe.ObserveOrigin.File, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.observe.ObserveOrigin.Concat} returns this
 */
proto.observe.ObserveOrigin.Concat.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.observe.ObserveOrigin.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.observe.ObserveOrigin.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.observe.ObserveOrigin.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transport: (f = msg.getTransport()) && proto.observe.Transport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.observe.ObserveOrigin.Stream}
 */
proto.observe.ObserveOrigin.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.observe.ObserveOrigin.Stream;
  return proto.observe.ObserveOrigin.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.observe.ObserveOrigin.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.observe.ObserveOrigin.Stream}
 */
proto.observe.ObserveOrigin.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.observe.Transport;
      reader.readMessage(value,proto.observe.Transport.deserializeBinaryFromReader);
      msg.setTransport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.observe.ObserveOrigin.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.observe.ObserveOrigin.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.observe.ObserveOrigin.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.observe.ObserveOrigin.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransport();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.observe.Transport.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.observe.ObserveOrigin.Stream.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.observe.ObserveOrigin.Stream} returns this
 */
proto.observe.ObserveOrigin.Stream.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Transport transport = 2;
 * @return {?proto.observe.Transport}
 */
proto.observe.ObserveOrigin.Stream.prototype.getTransport = function() {
  return /** @type{?proto.observe.Transport} */ (
    jspb.Message.getWrapperField(this, proto.observe.Transport, 2));
};


/**
 * @param {?proto.observe.Transport|undefined} value
 * @return {!proto.observe.ObserveOrigin.Stream} returns this
*/
proto.observe.ObserveOrigin.Stream.prototype.setTransport = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observe.ObserveOrigin.Stream} returns this
 */
proto.observe.ObserveOrigin.Stream.prototype.clearTransport = function() {
  return this.setTransport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observe.ObserveOrigin.Stream.prototype.hasTransport = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional File file = 1;
 * @return {?proto.observe.ObserveOrigin.File}
 */
proto.observe.ObserveOrigin.prototype.getFile = function() {
  return /** @type{?proto.observe.ObserveOrigin.File} */ (
    jspb.Message.getWrapperField(this, proto.observe.ObserveOrigin.File, 1));
};


/**
 * @param {?proto.observe.ObserveOrigin.File|undefined} value
 * @return {!proto.observe.ObserveOrigin} returns this
*/
proto.observe.ObserveOrigin.prototype.setFile = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.observe.ObserveOrigin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observe.ObserveOrigin} returns this
 */
proto.observe.ObserveOrigin.prototype.clearFile = function() {
  return this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observe.ObserveOrigin.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Concat concat = 2;
 * @return {?proto.observe.ObserveOrigin.Concat}
 */
proto.observe.ObserveOrigin.prototype.getConcat = function() {
  return /** @type{?proto.observe.ObserveOrigin.Concat} */ (
    jspb.Message.getWrapperField(this, proto.observe.ObserveOrigin.Concat, 2));
};


/**
 * @param {?proto.observe.ObserveOrigin.Concat|undefined} value
 * @return {!proto.observe.ObserveOrigin} returns this
*/
proto.observe.ObserveOrigin.prototype.setConcat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.observe.ObserveOrigin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observe.ObserveOrigin} returns this
 */
proto.observe.ObserveOrigin.prototype.clearConcat = function() {
  return this.setConcat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observe.ObserveOrigin.prototype.hasConcat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Stream stream = 3;
 * @return {?proto.observe.ObserveOrigin.Stream}
 */
proto.observe.ObserveOrigin.prototype.getStream = function() {
  return /** @type{?proto.observe.ObserveOrigin.Stream} */ (
    jspb.Message.getWrapperField(this, proto.observe.ObserveOrigin.Stream, 3));
};


/**
 * @param {?proto.observe.ObserveOrigin.Stream|undefined} value
 * @return {!proto.observe.ObserveOrigin} returns this
*/
proto.observe.ObserveOrigin.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.observe.ObserveOrigin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.observe.ObserveOrigin} returns this
 */
proto.observe.ObserveOrigin.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.observe.ObserveOrigin.prototype.hasStream = function() {
  return jspb.Message.getField(this, 3) != null;
};


