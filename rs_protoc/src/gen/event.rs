// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationDone {
    #[prost(string, tag="1")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub result: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ticks {
    #[prost(uint64, tag="1")]
    pub count: u64,
    #[prost(string, tag="2")]
    pub state: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub total: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Notification {
    #[prost(enumeration="super::error::Severity", tag="1")]
    pub severity: i32,
    #[prost(string, tag="2")]
    pub content: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub line: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallbackEvent {
    #[prost(oneof="callback_event::Event", tags="1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14")]
    pub event: ::core::option::Option<callback_event::Event>,
}
/// Nested message and enum types in `CallbackEvent`.
pub mod callback_event {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SearchUpdated {
        #[prost(uint64, tag="1")]
        pub found: u64,
        #[prost(map="string, uint64", tag="2")]
        pub stat: ::std::collections::HashMap<::prost::alloc::string::String, u64>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct IndexedMapUpdated {
        #[prost(uint64, tag="1")]
        pub len: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SearchMapUpdated {
        #[prost(string, tag="1")]
        pub update: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SearchValuesUpdated {
        #[prost(map="uint32, message", tag="1")]
        pub values: ::std::collections::HashMap<u32, search_values_updated::ValueRange>,
    }
    /// Nested message and enum types in `SearchValuesUpdated`.
    pub mod search_values_updated {
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ValueRange {
            #[prost(double, tag="1")]
            pub min: f64,
            #[prost(double, tag="2")]
            pub max: f64,
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AttachmentsUpdated {
        #[prost(uint64, tag="1")]
        pub len: u64,
        #[prost(message, optional, tag="2")]
        pub attachment: ::core::option::Option<super::super::attachment::AttachmentInfo>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Progress {
        #[prost(string, tag="1")]
        pub uuid: ::prost::alloc::string::String,
        #[prost(message, optional, tag="2")]
        pub detail: ::core::option::Option<progress::ProgressDetail>,
    }
    /// Nested message and enum types in `Progress`.
    pub mod progress {
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ProgressDetail {
            #[prost(oneof="progress_detail::Detail", tags="1, 2, 3")]
            pub detail: ::core::option::Option<progress_detail::Detail>,
        }
        /// Nested message and enum types in `ProgressDetail`.
        pub mod progress_detail {
            #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
            pub enum Detail {
                #[prost(message, tag="1")]
                Ticks(super::super::super::Ticks),
                #[prost(message, tag="2")]
                Notification(super::super::super::Notification),
                #[prost(bool, tag="3")]
                Stopped(bool),
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct OperationError {
        #[prost(string, tag="1")]
        pub uuid: ::prost::alloc::string::String,
        #[prost(message, optional, tag="2")]
        pub error: ::core::option::Option<super::super::error::NativeError>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(uint64, tag="1")]
        StreamUpdated(u64),
        #[prost(bool, tag="2")]
        FileRead(bool),
        #[prost(message, tag="3")]
        SearchUpdated(SearchUpdated),
        #[prost(message, tag="4")]
        IndexedMapUpdated(IndexedMapUpdated),
        #[prost(message, tag="5")]
        SearchMapUpdated(SearchMapUpdated),
        #[prost(message, tag="6")]
        SearchValuesUpdated(SearchValuesUpdated),
        #[prost(message, tag="7")]
        AttachmentsUpdated(AttachmentsUpdated),
        #[prost(message, tag="8")]
        Progress(Progress),
        #[prost(message, tag="9")]
        SessionError(super::super::error::NativeError),
        #[prost(message, tag="10")]
        OperationError(OperationError),
        #[prost(string, tag="11")]
        OperationStarted(::prost::alloc::string::String),
        #[prost(string, tag="12")]
        OperationProcessing(::prost::alloc::string::String),
        #[prost(message, tag="13")]
        OperationDone(super::OperationDone),
        #[prost(bool, tag="14")]
        SessionDestroyed(bool),
    }
}
// @@protoc_insertion_point(module)
