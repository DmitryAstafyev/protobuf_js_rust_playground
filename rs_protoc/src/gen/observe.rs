// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObserveOptions {
    #[prost(message, optional, tag="1")]
    pub origin: ::core::option::Option<ObserveOrigin>,
    #[prost(message, optional, tag="2")]
    pub parser: ::core::option::Option<ParserType>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DltParserSettings {
    #[prost(message, optional, tag="1")]
    pub filter_config: ::core::option::Option<DltFilterConfig>,
    #[prost(string, repeated, tag="2")]
    pub fibex_file_paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag="3")]
    pub with_storage_header: bool,
    #[prost(string, tag="4")]
    pub tz: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DltFilterConfig {
    #[prost(uint32, tag="1")]
    pub min_log_level: u32,
    #[prost(string, repeated, tag="2")]
    pub app_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="3")]
    pub ecu_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="4")]
    pub context_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag="5")]
    pub app_id_count: i64,
    #[prost(int64, tag="6")]
    pub context_id_count: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SomeIpParserSettings {
    #[prost(string, repeated, tag="1")]
    pub fibex_file_paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessTransportConfig {
    #[prost(string, tag="1")]
    pub cwd: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub command: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub envs: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SerialTransportConfig {
    #[prost(string, tag="1")]
    pub path: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub baud_rate: u32,
    #[prost(uint32, tag="3")]
    pub data_bits: u32,
    #[prost(uint32, tag="4")]
    pub flow_control: u32,
    #[prost(uint32, tag="5")]
    pub parity: u32,
    #[prost(uint32, tag="6")]
    pub stop_bits: u32,
    #[prost(uint32, tag="7")]
    pub send_data_delay: u32,
    #[prost(bool, tag="8")]
    pub exclusive: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TcpTransportConfig {
    #[prost(string, tag="1")]
    pub bind_addr: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MulticastInfo {
    #[prost(string, tag="1")]
    pub multiaddr: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub interface: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UdpTransportConfig {
    #[prost(string, tag="1")]
    pub bind_addr: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub multicast: ::prost::alloc::vec::Vec<MulticastInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileFormat {
}
/// Nested message and enum types in `FileFormat`.
pub mod file_format {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Type {
        PcapNg = 0,
        PcapLegacy = 1,
        Text = 2,
        Binary = 3,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Type::PcapNg => "PcapNG",
                Type::PcapLegacy => "PcapLegacy",
                Type::Text => "Text",
                Type::Binary => "Binary",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PcapNG" => Some(Self::PcapNg),
                "PcapLegacy" => Some(Self::PcapLegacy),
                "Text" => Some(Self::Text),
                "Binary" => Some(Self::Binary),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParserType {
    #[prost(oneof="parser_type::Type", tags="1, 2, 3")]
    pub r#type: ::core::option::Option<parser_type::Type>,
}
/// Nested message and enum types in `ParserType`.
pub mod parser_type {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag="1")]
        Dlt(super::DltParserSettings),
        #[prost(message, tag="2")]
        SomeIp(super::SomeIpParserSettings),
        #[prost(bool, tag="3")]
        Text(bool),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transport {
    #[prost(oneof="transport::Transport", tags="1, 2, 3, 4")]
    pub transport: ::core::option::Option<transport::Transport>,
}
/// Nested message and enum types in `Transport`.
pub mod transport {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Transport {
        #[prost(message, tag="1")]
        Process(super::ProcessTransportConfig),
        #[prost(message, tag="2")]
        Tcp(super::TcpTransportConfig),
        #[prost(message, tag="3")]
        Udp(super::UdpTransportConfig),
        #[prost(message, tag="4")]
        Serial(super::SerialTransportConfig),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObserveOrigin {
    #[prost(oneof="observe_origin::Origin", tags="1, 2, 3")]
    pub origin: ::core::option::Option<observe_origin::Origin>,
}
/// Nested message and enum types in `ObserveOrigin`.
pub mod observe_origin {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct File {
        #[prost(string, tag="1")]
        pub name: ::prost::alloc::string::String,
        #[prost(enumeration="super::file_format::Type", tag="2")]
        pub format: i32,
        #[prost(string, tag="3")]
        pub path: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Concat {
        #[prost(message, repeated, tag="1")]
        pub files: ::prost::alloc::vec::Vec<File>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Stream {
        #[prost(string, tag="1")]
        pub name: ::prost::alloc::string::String,
        #[prost(message, optional, tag="2")]
        pub transport: ::core::option::Option<super::Transport>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Origin {
        #[prost(message, tag="1")]
        File(File),
        #[prost(message, tag="2")]
        Concat(Concat),
        #[prost(message, tag="3")]
        Stream(Stream),
    }
}
// @@protoc_insertion_point(module)
