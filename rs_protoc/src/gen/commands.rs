// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    #[prost(oneof="output::Output", tags="1, 2, 3, 4, 5, 6")]
    pub output: ::core::option::Option<output::Output>,
}
/// Nested message and enum types in `Output`.
pub mod output {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct StringVec {
        #[prost(string, repeated, tag="1")]
        pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Empty {
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Output {
        #[prost(string, tag="1")]
        StringValue(::prost::alloc::string::String),
        #[prost(message, tag="2")]
        StringVecValue(StringVec),
        #[prost(string, tag="3")]
        OptionStringValue(::prost::alloc::string::String),
        #[prost(bool, tag="4")]
        BoolValue(bool),
        #[prost(int64, tag="5")]
        Int64Value(i64),
        #[prost(message, tag="6")]
        EmptyValue(Empty),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommandOutcome {
    #[prost(oneof="command_outcome::Outcome", tags="1, 2")]
    pub outcome: ::core::option::Option<command_outcome::Outcome>,
}
/// Nested message and enum types in `CommandOutcome`.
pub mod command_outcome {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Finished {
        #[prost(message, optional, tag="1")]
        pub result: ::core::option::Option<super::Output>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Cancelled {
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Outcome {
        #[prost(message, tag="1")]
        Finished(Finished),
        #[prost(message, tag="2")]
        Cancelled(Cancelled),
    }
}
// @@protoc_insertion_point(module)
